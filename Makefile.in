### @configure_input@

# Copyright (C) 1992-2014 Free Software Foundation, Inc.

# This file is part of GNU Emacs.

# GNU Emacs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# GNU Emacs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

### Commentary:

# make all	to compile and build Emacs.
# make install	to install it.
# make TAGS	to update tags tables.
#
# make clean  or  make mostlyclean
#      Delete all files from the current directory that are normally
#      created by building the program.	 Do NOT delete the files that
#      record the configuration.  Also preserve files that could be made
#      by building, but normally are NOT because the distribution comes
#      with them.
#
#      Delete `.dvi' files here if they are not part of the distribution.
#
# make distclean
#      Delete all files from the current directory that are created by
#      configuring or building the program.  If you have unpacked the
#      source and built the program without creating any other files,
#      `make distclean' should leave only the files that were in the
#      distribution.
#
# make maintainer-clean
#      Delete everything from the current directory that can be
#      reconstructed with this Makefile.  This typically includes
#      everything deleted by distclean, plus more: .elc files,
#      C source files produced by Bison, tags tables, info files,
#      and so on.
#
# make extraclean
#      Still more severe - delete backup and autosave files, too.
#      Also generated files that do not normally change and can be slow
#      to rebuild (eg leim/ja-dic).
#
# make bootstrap
#      Removes all the compiled files to force a new bootstrap from a
#      clean slate, and then build in the normal way.
#
# make docs
#      Make Emacs documentation files from their sources; requires
#      makeinfo.

SHELL = @SHELL@

# This may not work with certain non-GNU make's.  It only matters when
# inheriting a CDPATH not starting with the current directory.
CDPATH=

# If Make does NOT predefine MAKE, then set it here.
@SET_MAKE@

# Prevent submakes from outputting "Entering directory ..." and
# "Leaving directory..." diagnostics that would mess up 'make echo-info'.
QUIET_SUBMAKE = MAKELEVEL=0

# Variables for in case we convert to automake:
ACLOCAL_AMFLAGS = -I m4 --install
EXTRA_DIST = m4/gnulib-cache.m4
DISTCLEANFILES = .DS_Store *~ build-aux/*~ build-aux/snippet/*~ m4/*~

# ==================== Things `configure' Might Edit ====================

cache_file = @cache_file@
CONFIGURE_FLAGS = --cache-file=$(cache_file)

AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@
ACLOCAL = @ACLOCAL@
AWK = @AWK@

CC=@CC@
CFLAGS=@CFLAGS@
CXX=@CXX@
CXXFLAGS=@CXXFLAGS@
LDFLAGS=@LDFLAGS@
CPPFLAGS=@CPPFLAGS@
EXEEXT=@EXEEXT@

WARN_CFLAGS = @WARN_CFLAGS@
WARN_CXXFLAGS = @WARN_CXXFLAGS@
WARN_LDFLAGS = @WARN_LDFLAGS@
BETTER_DEBUG_CFLAGS = @BETTER_DEBUG_CFLAGS@

PRE_WARNING_TESTING_CFLAGS = @PRE_WARNING_TESTING_CFLAGS@

CLANG_ANALYZER = @CLANG_ANALYZER@

RUN_CLANG_ANALYZER = $(CLANG_ANALYZER) $(PRE_WARNING_TESTING_CFLAGS) \
  $(DEFS) $(CPPFLAGS) $(MYCPPFLAGS) -DDEBUG -D_DEBUG \
  -DSTANDALONE_ISEMACSVALID -Dlint -I. -Isrc -Ilib-src -idirafter lib \
  -Imachocheck/src/other --analyze

SED = @SED@

### These help us choose version- and architecture-specific directories
### to install files in.

### This should be the number of the Emacs version we are building,
### like `18.59' or `19.0'.
version=@version@

### This should be the name of the configuration we are building Emacs
### for, like `mips-dec-ultrix' or `sparc-sun-sunos'.
configuration=@configuration@

### The nt/ subdirectory gets built only for MinGW
NTDIR=@NTDIR@

# ==================== Where To Install Things ====================

# Location to install the Carbon Emacs.app on Mac OS X
carbon_appdir=@carbon_appdir@
## (same thing as mac_appdir in Yamamoto Mitsuharu's Mac port.)

# Location to install the Cocoa Emacs.app under GNUstep / Mac OS X.
# Later values may use these.
ns_appbindir=@ns_appbindir@
ns_appresdir=@ns_appresdir@
# Either yes or no depending on whether this is a relocatable Emacs.app.
ns_self_contained=@ns_self_contained@

# The default location for installation.  Everything is placed in
# subdirectories of this directory.  The default values for many of
# the variables below are expressed in terms of this one, so you may
# not need to change them.  This defaults to /usr/local.
prefix=@prefix@

# Like `prefix', but used for architecture-specific files.
exec_prefix=@exec_prefix@

# Where to install Emacs and other binaries that people will want to
# run directly (like etags).
bindir=@bindir@

# The root of the directory tree for read-only architecture-independent
# data files.  ${datadir}, ${infodir} and ${mandir} are based on this.
datarootdir=@datarootdir@

# Where to install architecture-independent data files.	 ${lispdir}
# and ${etcdir} are subdirectories of this.
datadir=@datadir@

# Where to install and expect the files that Emacs modifies as it
# runs.  These files are all architecture-independent.
# Right now, this is not used.
sharedstatedir=@sharedstatedir@

# Where to install and expect executable files to be run by Emacs
# rather than directly by users (and other architecture-dependent
# data, although Emacs does not have any).  The executables
# are actually installed in ${archlibdir}, which is (normally)
# a subdirectory of this.
libexecdir=@libexecdir@

# Where to install Emacs's man pages.
# Note they contain cross-references that expect them to be in section 1.
mandir=@mandir@
man1dir=$(mandir)/man1

# Where to install and expect the info files describing Emacs.
infodir=@infodir@
# Info files not in the doc/misc directory
# (we get those via make echo-info).
INFO_EXT=@INFO_EXT@
INFO_NONMISC=emacs$(INFO_EXT) eintr$(INFO_EXT) elisp$(INFO_EXT)

# If no makeinfo was found and configured --without-makeinfo, "no";
# else "yes".
HAVE_MAKEINFO=@HAVE_MAKEINFO@

# Directory for local state files for all programs.
localstatedir=@localstatedir@

# Where to look for bitmap files.
bitmapdir=@bitmapdir@

# Where to find the source code.  The source code for Emacs's C kernel is
# expected to be in ${srcdir}/src, and the source code for Emacs's
# utility programs is expected to be in ${srcdir}/lib-src.  This is
# set by the configure script's `--srcdir' option.

# We use $(srcdir) explicitly in dependencies so as not to depend on VPATH.
srcdir=@srcdir@
abs_srcdir=@abs_srcdir@
# MinGW CPPFLAGS may use this.
abs_top_srcdir=@abs_top_srcdir@

# Where the manpage source files are kept.
mansrcdir=$(srcdir)/doc/man

# Tell make where to find source files; this is needed for the makefiles.
VPATH=@srcdir@

# Where build output is put.
builddir = @builddir@
analysisdir = $(builddir)/clang_static_analysis

# Where to find the application default.
x_default_search_path=@x_default_search_path@

# Where the etc/emacs.desktop file is to be installed.
desktopdir=$(datarootdir)/applications

# Where the etc/emacs.appdata.xml file is to be installed.
appdatadir=$(datarootdir)/appdata

# Where the etc/images/icons/hicolor directory is to be installed.
icondir=$(datarootdir)/icons

# The source directory for the icon files.
iconsrcdir=$(srcdir)/etc/images/icons

# ==================== Emacs-specific directories ====================

# These variables hold the values Emacs will actually use.  They are
# based on the values of the standard Make variables above.

# Where to install the lisp files distributed with Emacs.
# This includes the Emacs version, so that the lisp files for different
# versions of Emacs will install themselves in separate directories.
lispdir=@lispdir@

# Directories Emacs should search for standard lisp files.
# The default is ${lispdir}.
standardlisppath=@standardlisppath@

# Directories Emacs should search for lisp files specific to this
# site (i.e. customizations), before consulting ${standardlisppath}.
# This should be a colon-separated list of directories.
locallisppath=@locallisppath@

# Where Emacs will search to find its lisp files.  Before
# changing this, check to see if your purpose would NOT
# better be served by changing locallisppath.  This
# should be a colon-separated list of directories.
# The default is ${locallisppath}:${standardlisppath}.
lisppath=@lisppath@

# Where Emacs will search for its lisp files while building.
# This is only used during the process of compiling Emacs,
# to help Emacs find its lisp files before they have been installed
# in their final location.
# This should be a colon-separated list of directories.
# Normally it points to the lisp/ directory in the sources.
# NB lread.c relies on lisp/ being first here.
buildlisppath=${abs_srcdir}/lisp

# Where to install the other architecture-independent
# data files distributed with Emacs (like the tutorial,
# the cookie recipes and the Zippy database). This path
# usually contains the Emacs version number, so the data
# files for multiple versions of Emacs may be installed
# at once.
etcdir=@etcdir@

# Where to put executables to be run by Emacs rather than
# the user.  This path usually includes the Emacs version
# and configuration name, so that multiple configurations
# for multiple versions of Emacs may be installed at
# once.
archlibdir=@archlibdir@

# Where to put the etc/DOC file.
etcdocdir=@etcdocdir@

# Where to install Emacs game score files.
gamedir=@gamedir@

# ==================== Utility Programs for the Build ====================

# Allow the user to specify the install program.
# Note that if the system does not provide a suitable install,
# configure will use build-aux/install-sh.  Annoyingly, it does
# not use an absolute path.  So we must take care to always run
# INSTALL-type commands from the directory containing the Makefile.
# This explains (I think) the cd thisdir seen in several install rules.
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_INFO = @INSTALL_INFO@
# By default, we uphold the dignity of our programs.
INSTALL_STRIP =
MKDIR_P = @MKDIR_P@
# Create a link to a file in the same directory as the target.
LN_S_FILEONLY = @LN_S_FILEONLY@

# We use gzip to compress installed .el and some .txt files.
GZIP_PROG = @GZIP_PROG@

# ============================= Targets ==============================

# Program name transformation.
TRANSFORM = @program_transform_name@

# What emacs should be called when installed.
EMACS_NAME = `echo emacs | $(SED) '$(TRANSFORM)'`
EMACS = ${EMACS_NAME}${EXEEXT}
EMACSFULL = `echo emacs-${version} | $(SED) '$(TRANSFORM)'`${EXEEXT}

# Subdirectories to make recursively.
SUBDIR = $(NTDIR) lib lib-src src lisp lispintro lispref
# As above, but only the ones with C sources:
SUBDIR_C = $(NTDIR) lib lib-src src
# For real though:
SUBDIR_REALLY_ONLY_C = lib lib-src

# The subdir makefiles created by config.status.
SUBDIR_MAKEFILES_IN = @SUBDIR_MAKEFILES_IN@
SUBDIR_MAKEFILES = `echo $(SUBDIR_MAKEFILES_IN:.in=) | $(SED) 's|$(srcdir)/||g'`

# Mac template files from which config.status generates config files.
MAC_TEMPLATE_FILES = @MAC_TEMPLATE_FILES@

# Subdirectories to install, and where they will go.  lib-src's and nt's
# makefiles know how to install them, so we do NOT do that here.
# Directories that cannot simply be copied, e.g. info, are treated
# separately.
COPYDIR = ${srcdir}/etc ${srcdir}/lisp
COPYDESTS = "$(DESTDIR)${etcdir}" "$(DESTDIR)${lispdir}"

all: ${SUBDIR} info
all_c: ${SUBDIR_C}
all_only_c: ${SUBDIR_REALLY_ONLY_C}

.PHONY: all all_c ${SUBDIR} blessmail epaths-force epaths-force-w32 FRC
.PHONY: etc-emacsver all_only_c

# If configure were to just generate emacsver.tex from emacsver.tex.in
# in the normal way, the timestamp of emacsver.tex would always be
# newer than that of the pdf files, which are prebuilt in release tarfiles.
# So we use this rule, and move-if-change, to avoid that.
etc-emacsver:
	majorversion=`echo ${version} | $(SED) 's/\..*//'`; \
	$(SED) "s/[@]majorversion@/$${majorversion}/" \
	  ${srcdir}/etc/refcards/emacsver.tex.in > emacsver.tex.$$$$ && \
	  ${srcdir}/build-aux/move-if-change emacsver.tex.$$$$ \
	  ${srcdir}/etc/refcards/emacsver.tex

removenullpaths=$(SED) -e 's/^:*//' -e 's/:*$$//g' -e 's/::*/:/g'

# Generate epaths.h from epaths.in.  This target is invoked by `configure'.
# See comments in configure.ac for why it is done this way, as opposed
# to just letting configure generate epaths.h from epaths.in in a
# similar way to how Makefile is made from Makefile.in.
epaths-force: FRC
	@for dir in '$(abs_srcdir)' '$(lispdir)' '$(archlibdir)'; do \
	  case $${dir} in \
	    *:*) \
	      echo >&2 "Build or installation directory '$${dir}'"; \
	      echo >&2 "cannot contain ':'."; \
	      exit 1;; \
	  esac; \
	done
	@(standardlisppath=`echo "${standardlisppath}" | ${removenullpaths}` ; \
	  locallisppath=`echo "${locallisppath}" | ${removenullpaths}` ; \
	  buildlisppath=`echo "${buildlisppath}" | ${removenullpaths}` ; \
	  x_default_search_path=`echo ${x_default_search_path}`; \
	  gamedir=`echo ${gamedir}`; \
	  $(SED) < ${srcdir}/src/epaths.in > epaths.h.$$$$		\
	  -e 's;\(#.*PATH_LOADSEARCH\).*$$;\1 "'"$${standardlisppath}"'";' \
	  -e 's;\(#.*PATH_SITELOADSEARCH\).*$$;\1 "'"$${locallisppath}"'";' \
	  -e 's;\(#.*PATH_DUMPLOADSEARCH\).*$$;\1 "'"$${buildlisppath}"'";' \
	  -e 's;\(#.*PATH_EXEC\).*$$;\1 "${archlibdir}";'		\
	  -e 's;\(#.*PATH_INFO\).*$$;\1 "${infodir}";'			\
	  -e 's;\(#.*PATH_DATA\).*$$;\1 "${etcdir}";'			\
	  -e 's;\(#.*PATH_BITMAPS\).*$$;\1 "${bitmapdir}";'		\
	  -e 's;\(#.*PATH_X_DEFAULTS\).*$$;\1 "${x_default_search_path}";' \
	  -e 's;\(#.*PATH_GAME\).*$$;\1 "${gamedir}";' \
	  -e 's;\(#.*PATH_DOC\).*$$;\1 "${etcdocdir}";') &&		\
	${srcdir}/build-aux/move-if-change epaths.h.$$$$ src/epaths.h

# Replace "${w32prefix}" with '%emacs_dir%' (which expands to install
# directory at runtime).
msys_w32prefix_subst=$(SED) -e 's!\(^\|;\)'"$${w32prefixpattern}"'\([;/]\|$$\)!\1%emacs_dir%\2!g'

# Quote Sed special characters (except backslash and newline) with
# a double backslash.
msys_sed_sh_escape=$(SED) -e 's/[];$$*.^[]/\\\\&/g'

# The w32 build needs a slightly different editing, and it uses
# nt/epaths.nt as the template.
#
# Use the value of ${locallisppath} supplied by `configure',
# to support the --enable-locallisppath argument.
#
# In this case, the paths written to 'src/epaths.h' must be in native
# MS-Windows format (e.g. 'c:/foo/bar'), because temacs is a MinGW
# program that does NOT support MSYS-style paths (e.g. '/c/foo/bar' or
# '/foo/bar').
epaths-force-w32: FRC
	@(w32srcdir=`${srcdir}/build-aux/msys-to-w32 "${srcdir}"`; \
	  w32prefix=`${srcdir}/build-aux/msys-to-w32 "${prefix}" N`; \
	  w32prefixpattern=`echo "$${w32prefix}" | ${msys_sed_sh_escape}` ; \
	  w32locallisppath=`${srcdir}/build-aux/msys-to-w32 "${locallisppath}" N ":" "\\;" | ${msys_w32prefix_subst}` ; \
	  $(SED) < ${srcdir}/nt/epaths.nt > epaths.h.$$$$		\
	  -e 's;\(#.*PATH_SITELOADSEARCH\).*$$;\1 "'"$${w32locallisppath}"'";' \
	  -e '/^.*#/s/@VER@/${version}/g' 			\
	  -e '/^.*#/s/@CFG@/${configuration}/g' 		\
	  -e "/^.*#/s|@SRC@|$${w32srcdir}|g") &&		\
	${srcdir}/build-aux/move-if-change epaths.h.$$$$ src/epaths.h

# If lib/Makefile would build files in '.', then build them before
# building 'lib', to avoid races with parallel makes.
lib: am--refresh

lib-src src: $(NTDIR) lib

src: lib-src

# We need to build `emacs' in `src' to compile the *.elc files in `lisp'.
lisp: src

# These targets should be "${SUBDIR} without `src'".
lib lib-src lisp nt: Makefile FRC
	cd $@ && $(MAKE) all $(MFLAGS)                         \
	  CC='${CC}' CFLAGS='${CFLAGS}' CPPFLAGS='${CPPFLAGS}' \
	  LDFLAGS='${LDFLAGS}' MAKE='${MAKE}'

# Pass to src/Makefile.in an additional BOOTSTRAPEMACS variable which
# is either set to bootstrap-emacs (in case bootstrap-emacs has not been
# constructed yet) or the empty string (otherwise).
# src/Makefile.in uses it to implement conditional dependencies, so that
# files that need bootstrap-emacs to be built do not additionally need
# to be kept fresher than bootstrap-emacs.  Otherwise changing a single
# file src/foo.c forces dumping a new bootstrap-emacs, then
# re-byte-compiling all preloaded elisp files, and only then dump the
# actual src/emacs, which is not wrong, but is overkill in 99.99% of the
# cases.
#
# Ideally, VCSWITNESS should be a file that is modified whenever the
# repository registers a commit from either a local checkin or a
# repository pull. In git there is no single file that guarantees
# this, but the local log for the current head should be close enough.
#
# Note the use of single quotes in the value of vcswitness.
# This passes an unexpanded ${srcdir} to src's Makefile, which then
# expands it using its own value of srcdir (which points to the
# source directory of src/).
src: Makefile FRC
	if [ -d .git ]; then 				                \
	  dirstate='.git/logs/HEAD'; 				        \
	elif [ -d .bzr ]; then				                \
	  dirstate='.bzr/checkout/dirstate';				\
	else 				                                \
	  echo "warning: unsure what to set dirstate to" >&2;           \
	  dirstate='dirstate'; 				                \
	fi; 				                                \
	vcswitness='$$(srcdir)/../'$${dirstate};			\
	[ -r "$(srcdir)/$${dirstate}" ] || vcswitness='';		\
	cd $@ || exit;							\
	boot=bootstrap-emacs$(EXEEXT);					\
	[ ! -x "$${boot}" ] || boot='';					\
	$(MAKE) all $(MFLAGS)						\
	  CC='${CC}' CFLAGS='${CFLAGS}' CPPFLAGS='${CPPFLAGS}'		\
	  LDFLAGS='${LDFLAGS}' MAKE='${MAKE}' BOOTSTRAPEMACS="$${boot}"	\
	  VCSWITNESS="$${vcswitness}"

blessmail: Makefile src FRC
	cd lib-src && $(MAKE) maybe-blessmail $(MFLAGS) \
	  MAKE='${MAKE}' archlibdir='$(archlibdir)'

# We used to have one rule per */Makefile.in, but that leads to race
# conditions with parallel makes, so let us assume that the time stamp on
# ./Makefile is representative of the time stamp on all the other
# Makefiles.
#
# config.status overrides MAKEFILE_NAME with a bogus name when creating
# src/epaths.h, so that 'make epaths-force' does not recursively invoke
# config.status and overwrite config.status while executing it (Bug#11214).
#
# 'make bootstrap' overrides MAKEFILE_NAME to a nonexistent file but
# then attempts to build that file.  This forces 'Makefile',
# 'lib/Makefile', etc. to be built without running into similar recursion
# problems.
MAKEFILE_NAME = Makefile
$(MAKEFILE_NAME): config.status $(srcdir)/src/config.in \
          $(srcdir)/Makefile.in $(SUBDIR_MAKEFILES_IN) \
          $(srcdir)/src/lisp.mk \
          $(MAC_TEMPLATE_FILES)
	MAKE='$(MAKE)' ./config.status

# Do NOT erase these files if make is interrupted while refreshing them.
.PRECIOUS: Makefile config.status

config.status: ${srcdir}/configure ${srcdir}/lisp/version.el
	if [ -x ./config.status ]; then	\
	    $(CFG) ./config.status --recheck;	\
	else				\
	    $(CFG) $(srcdir)/configure $(CONFIGURE_FLAGS); \
	fi

AUTOCONF_INPUTS = $(srcdir)/configure.ac $(srcdir)/aclocal.m4

$(srcdir)/configure: $(AUTOCONF_INPUTS)
	cd ${srcdir} && ${AUTOCONF}

ACLOCAL_PATH = @ACLOCAL_PATH@
ACLOCAL_INPUTS = $(srcdir)/configure.ac $(srcdir)/m4/gnulib-comp.m4
$(srcdir)/aclocal.m4: $(ACLOCAL_INPUTS)
	cd $(srcdir) && ACLOCAL_PATH='$(ACLOCAL_PATH)' $(ACLOCAL) $(ACLOCAL_AMFLAGS)

AUTOMAKE_INPUTS = $(srcdir)/aclocal.m4 $(srcdir)/lib/Makefile.am \
  $(srcdir)/lib/gnulib.mk
$(srcdir)/lib/Makefile.in: $(AUTOMAKE_INPUTS)
	cd $(srcdir) && $(AUTOMAKE) --gnits -a -c lib/Makefile

# Regenerate files that this makefile would have made, if this makefile
# had been built by Automake.  The name 'am--refresh' is for
# compatibility with subsidiary Automake-generated makefiles.
am--refresh: $(srcdir)/aclocal.m4 $(srcdir)/configure $(srcdir)/src/config.in
.PHONY: am--refresh

$(srcdir)/src/config.in: $(srcdir)/src/stamp-h.in
	@ # Usually, there is no need to rebuild src/config.in just
	@ # because stamp-h.in has changed (since building stamp-h.in
	@ # refreshes config.in as well), but if config.in is missing
	@ # then we really need to do something more.
	[ -r "$@" ] || ( cd ${srcdir} && ${AUTOHEADER} )
$(srcdir)/src/stamp-h.in: $(AUTOCONF_INPUTS)
	cd ${srcdir} && ${AUTOHEADER}
	rm -f $(srcdir)/src/stamp-h.in
	echo "timestamp: `date`" > $(srcdir)/src/stamp-h.in

# ==================== Installation ====================

.PHONY: install install-arch-dep install-arch-indep install-etcdoc
.PHONY: install-info install-man install-etc install-strip install-$(NTDIR)
.PHONY: uninstall uninstall-$(NTDIR)

## If we let lib-src do its own installation, that means we
## do NOT have to duplicate the list of utilities to install in
## this Makefile as well.

install: all install-arch-indep install-etcdoc install-arch-dep install-$(NTDIR) blessmail
	@echo "the install target only calls its dependencies"

## Ensure that $${subdir} contains a subdirs.el file.
## Here and elsewhere, we set the umask so that any created files are
## world-readable.
## TODO: it might be good to warn about non-standard permissions of
## pre-existing directories, but that does not seem easy.
write_subdir=if [ -f "$${subdir}/subdirs.el" ]; \
	then echo "found subdirs.el"; \
	else \
	  umask 022; \
	  ${MKDIR_P} -v "$${subdir}"; \
	  (echo "(if (fboundp 'normal-top-level-add-subdirs-to-load-path)"; \
	   echo "    (normal-top-level-add-subdirs-to-load-path))") \
	    > "$${subdir}/subdirs.el"; \
	fi

### Install the executables that were compiled specifically for this
### machine. We do install-arch-indep first because the executable needs
### the Lisp files and DOC file to work properly.
install-arch-dep: src install-arch-indep install-etcdoc install-$(NTDIR)
	umask 022; ${MKDIR_P} -v "$(DESTDIR)${bindir}"
	cd lib-src && \
	  $(MAKE) install $(MFLAGS) prefix="${prefix}" \
	    exec_prefix="${exec_prefix}" bindir="${bindir}" \
	    libexecdir="${libexecdir}" archlibdir="${archlibdir}" \
	    INSTALL_STRIP=${INSTALL_STRIP}
	if test "${carbon_appdir}" != ""; then \
	  umask 022; ${MKDIR_P} $(DESTDIR)${carbon_appdir}/Emacs.app; \
	  (cd mac/Emacs.app; (tar -chf - . | \
		(cd $(DESTDIR)${carbon_appdir}/Emacs.app; umask 022; tar -xvf - \
			&& cat > /dev/null))) || exit 1; \
	fi
	if test "x${ns_self_contained}" = "xno"; then \
	  if [ -f src/emacs-undumped ]; then \
	    ${INSTALL_PROGRAM} $(INSTALL_STRIP) src/emacs-undumped $(DESTDIR)${bindir}/; \
	  else \
	    ${INSTALL_PROGRAM} $(INSTALL_STRIP) src/emacs${EXEEXT} "$(DESTDIR)${bindir}/$(EMACSFULL)" || exit 1; \
	    chmod 1755 "$(DESTDIR)${bindir}/$(EMACSFULL)" || echo "done"; \
	  fi; \
	  if test "x${NO_BIN_LINK}" = "x"; then \
	    rm -fv "$(DESTDIR)${bindir}/$(EMACS)"; \
	    cd "$(DESTDIR)${bindir}" && $(LN_S_FILEONLY) $(EMACSFULL) $(EMACS); \
	  fi; \
	else \
	  subdir=${ns_appresdir}/site-lisp; \
	  ${write_subdir} || exit 1; \
	  rm -rf ${ns_appresdir}/share; \
	fi
	if test "x${carbon_appdir}" != "x"; then \
	  umask 022; ${MKDIR_P} -v $(DESTDIR)${carbon_appdir}/Emacs.app; \
	  (cd mac/Emacs.app; (tar -chf - . | \
		(cd $(DESTDIR)${carbon_appdir}/Emacs.app; umask 022; tar -xvf - \
			&& cat > /dev/null))) || exit 1; \
	fi

### Windows-specific install target for installing programs produced
### in nt/, and its Posix do-nothing shadow.
install-:
install-nt:
	cd $(NTDIR) && \
	  $(MAKE) install $(MFLAGS) prefix="${prefix}" \
	    exec_prefix="${exec_prefix}" bindir="${bindir}" \
	    libexecdir="${libexecdir}" archlibdir="${archlibdir}" \
	    datadir="${datadir}" \
	    INSTALL_STRIP=${INSTALL_STRIP}

## In the share directory, we are deleting:
## applications (with emacs.desktop, also found in etc/)
## emacs (basically empty except for unneeded site-lisp directories)
## icons (duplicates etc/images/icons/hicolor)

## This is install-etc for everything except self-contained-ns builds.
## For them, it is empty.
INSTALL_ARCH_INDEP_EXTRA = @INSTALL_ARCH_INDEP_EXTRA@

## http://lists.gnu.org/archive/html/emacs-devel/2007-10/msg01672.html
## Needs to be the user running install, so configure cannot set it.
set_installuser=for installuser in $${LOGNAME} $${USERNAME} $${USER} \
	  `id -un 2> /dev/null`; do \
	  [ -n "$${installuser}" ] && break ; \
	done

### Install the files that are machine-independent.
### Most of them come straight from the distribution; the exception is
### the DOC file, which is copied from the build directory.

## We delete each directory in ${COPYDESTS} before we copy into it;
## that way, we can reinstall over directories that have been put in
## place with their files read-only (perhaps because they are checked
## into RCS).  In order to make this safe, we make sure that the
## source exists and is distinct from the destination.

## We delete etc/DOC* because there may be irrelevant DOC files from
## other builds in the source directory.  This is ok because we just
## deleted the entire installed etc/ directory and recreated it.
## install-etcdoc installs the relevant DOC.

## Note that we install etc/refcards/*.ps if present.
## TODO we should compress these if GZIP_PROG is set.
## It would be simpler to have a separate install rule for etc/refcards
## (maybe move it to doc/refcards?).

## Note that the Makefiles in the etc directory are potentially useful
## in an installed Emacs, so should not be excluded.

## We always create the _default_ locallisppath directories, and
## ensure that they contain a subdirs.el file (via write_subdir).
## This is true even if locallisppath has a non-default value.
## In case of non-default value, we used to create the specified
## directories, but not add subdirs.el to them. This was a strange halfway
## house. Nowadays we do not create non-default directories.

## Note that we use tar instead of plain old cp -R/-r because the latter
## is apparently not portable (even in 2012!).
## http://lists.gnu.org/archive/html/emacs-devel/2012-05/msg00278.html
## I have no idea which platforms Emacs supports where cp -R does not
## work correctly, and therefore no idea when tar can be replaced.
## See also these comments from 2004 about cp -r working fine:
## http://lists.gnu.org/archive/html/autoconf-patches/2004-11/msg00005.html
install-arch-indep: lisp install-info install-man ${INSTALL_ARCH_INDEP_EXTRA}
	-set ${COPYDESTS} ; \
	unset CDPATH; \
	$(set_installuser); \
	for dir in ${COPYDIR} ; do \
	  [ -d $${dir} ] || exit 1 ; \
	  dest="$$1" ; shift ; \
	  if [ -d "$${dest}" ]; then \
	    exp_dest=`cd "$${dest}" && /bin/pwd`; \
	    [ "$$exp_dest" = "`cd $${dir} && /bin/pwd`" ] && continue ; \
	  else echo "$${dest} is not a directory"; \
	  fi; \
	  rm -rf "$${dest}" ; \
	  umask 022; ${MKDIR_P} -v "$${dest}"; \
	  echo "Copying $${dir} to $${dest}..."; \
	  (cd $${dir}; tar -chf - . ) \
	    | (cd "$${dest}"; umask 022; \
	       tar -xvf - && cat > /dev/null) || exit 1; \
	  if [ "$${dir}" = "${srcdir}/etc" ]; then \
	      rm -f "$${dest}/DOC"* ; \
	      rm -f "$${dest}/refcards"/*.aux "$${dest}/refcards"/*.dvi; \
	      rm -f "$${dest}/refcards"/*.log; \
	  else echo "$${dir} is not ${srcdir}/etc"; \
	  fi; \
	  (cd "$${dest}" || exit 1; \
	    for subdir in `find . -type d -print` ; do \
	      chmod a+rx $${subdir} ; \
	      rm -f $${subdir}/.gitignore ; \
	      rm -f $${subdir}/.arch-inventory ; \
	      rm -f $${subdir}/.DS_Store ; \
	      rm -f $${subdir}/\#* ; \
	      rm -f $${subdir}/.\#* ; \
	      rm -f $${subdir}/*~ ; \
	      rm -f $${subdir}/*.orig ; \
	      rm -f $${subdir}/ChangeLog* ; \
	      [ "$${dir}" != "${srcdir}/etc" ] && \
	        rm -f $${subdir}/[mM]akefile*[.-]in $${subdir}/[mM]akefile ; \
	    done ); \
	  find "$${dest}" -exec chown $${installuser} {} ';' ;\
	done
	-rm -f "$(DESTDIR)${lispdir}/subdirs.el"
	umask 022; $(srcdir)/build-aux/update-subdirs "$(DESTDIR)${lispdir}"
	subdir="$(DESTDIR)${datadir}/emacs/${version}/site-lisp" ; \
	  ${write_subdir}
	subdir="$(DESTDIR)${datadir}/emacs/site-lisp" ; \
	  ${write_subdir} || echo "done trying to write subdir"
	[ -z "${GZIP_PROG}" ] || { \
	  echo "Compressing *.el ..." && \
	  cd "$(DESTDIR)${lispdir}" && \
	  find . -name '*.elc' -exec $(SHELL) -c \
	    '${GZIP_PROG} -9n `expr "$$1" : "\\(.*\\)c"`' dummy '{}' ';'; \
	}
	-chmod -R a+r "$(DESTDIR)${datadir}/emacs/${version}" ${COPYDESTS}

## The above chmods are needed because "umask 022; tar ..." is not
## guaranteed to do the right thing; eg if we are root and tar is
## preserving source permissions.

## Note that install-arch-indep deletes and recreates the entire
## installed etc/ directory, so we need it to run before this does.
install-etcdoc: src install-arch-indep
	-unset CDPATH; \
	umask 022; ${MKDIR_P} -v "$(DESTDIR)${etcdocdir}" ; \
	exp_etcdocdir=`cd "$(DESTDIR)${etcdocdir}"; /bin/pwd`; \
	if [ "`cd ./etc; /bin/pwd`" != "$${exp_etcdocdir}" ]; \
	then \
	   docfile="DOC"; \
	   echo "Copying etc/$${docfile} to $(DESTDIR)${etcdocdir} ..." ; \
	   ${INSTALL_DATA} etc/$${docfile} "$(DESTDIR)${etcdocdir}/$${docfile}"; \
	   $(set_installuser); \
	     chown $${installuser} "$(DESTDIR)${etcdocdir}/$${docfile}" || echo "done trying to chown"; \
	else echo "done with etcdoc"; fi

## FIXME:
## If info/dir is missing, but we have install-info, we should let
## that handle it.  If info/dir is present and we do not have install-info,
## we should check for missing entries and add them by hand.
##
## FIXME:
## If HAVE_MAKEINFO = no and there are no info files, do not install
## info/dir.
install-info: info
	umask 022; ${MKDIR_P} -v "$(DESTDIR)${infodir}"
	-unset CDPATH; \
	thisdir=`/bin/pwd`; \
	exp_infodir=`cd "$(DESTDIR)${infodir}" && /bin/pwd`; \
	if [ "`cd ${srcdir}/info && /bin/pwd`" = "$$exp_infodir" ]; then \
	  echo "no installation of info necessary"; \
	else \
	   [ -f "$(DESTDIR)${infodir}/dir" ] || \
	      [ ! -f ${srcdir}/info/dir ] || \
	      ${INSTALL_DATA} ${srcdir}/info/dir "$(DESTDIR)${infodir}/dir"; \
	   info_misc=`cd doc/misc && $(QUIET_SUBMAKE) $(MAKE) -s echo-info`; \
	   cd ${srcdir}/info ; \
	   for elt in ${INFO_NONMISC} $${info_misc}; do \
	      test "$(HAVE_MAKEINFO)" = "no" && test ! -f $$elt && continue; \
	      for f in `ls $$elt $$elt-[1-9] $$elt-[1-9][0-9] 2>/dev/null`; do \
	       (cd "$${thisdir}"; \
	        ${INSTALL_DATA} ${srcdir}/info/$$f "$(DESTDIR)${infodir}/$$f"); \
	        [ -n "${GZIP_PROG}" ] || continue ; \
	        rm -f "$(DESTDIR)${infodir}/$$f.gz"; \
	        ${GZIP_PROG} -9n "$(DESTDIR)${infodir}/$$f"; \
	      done; \
	     (cd "$${thisdir}"; \
	      ${INSTALL_INFO} --info-dir="$(DESTDIR)${infodir}" "$(DESTDIR)${infodir}/$$elt"); \
	   done; \
	fi

## "gzip || true" is because some gzips exit with non-zero status
## if compression would not reduce the file size.  E.g., the gzip in
## OpenBSD 4.9 seems to do this (2013/03).  In Emacs, this can
## only happen with the tiny ctags.1 manpage.  We do NOT really care if
## ctags.1 is compressed or not.  "gzip -f" is another option here,
## but not sure if portable.
install-man:
	umask 022; ${MKDIR_P} -v "$(DESTDIR)${man1dir}"
	thisdir=`/bin/pwd`; \
	cd ${mansrcdir}; \
	for page in *.1; do \
	  dest=`echo "$${page}" | $(SED) -e 's/\.1$$//' -e '$(TRANSFORM)'`.1; \
	  (cd "$${thisdir}"; \
	   ${INSTALL_DATA} ${mansrcdir}/$${page} "$(DESTDIR)${man1dir}/$${dest}"); \
	  [ -n "${GZIP_PROG}" ] || continue ; \
	  rm -f "$(DESTDIR)${man1dir}/$${dest}.gz"; \
	  ${GZIP_PROG} -9n "$(DESTDIR)${man1dir}/$${dest}" || echo "OK"; \
	done

## Install those items from etc/ that need to end up elsewhere.

## If you prefer, choose "emacs22" at installation time.
## Note: emacs22 does not have all the resolutions.
EMACS_ICON=emacs

install-etc:
	umask 022; ${MKDIR_P} -v "$(DESTDIR)${desktopdir}"
	tmp=etc/emacs.tmpdesktop; rm -f $${tmp}; \
	emacs_name=`echo emacs | $(SED) '$(TRANSFORM)'`; \
	$(SED) -e "/^Exec=emacs/ s/emacs/$${emacs_name}/" \
	  -e "/^Icon=emacs/ s/emacs/$${emacs_name}/" \
	  ${srcdir}/etc/emacs.desktop > $${tmp}; \
	${INSTALL_DATA} $${tmp} "$(DESTDIR)${desktopdir}/${EMACS_NAME}.desktop"; \
	rm -f $${tmp}
	umask 022; ${MKDIR_P} -v "$(DESTDIR)${appdatadir}"
	tmp=etc/emacs.tmpappdata; rm -f $${tmp}; \
	$(SED) -e "s/emacs\.desktop/${EMACS_NAME}.desktop/" \
	  ${srcdir}/etc/emacs.appdata.xml > $${tmp}; \
	${INSTALL_DATA} $${tmp} "$(DESTDIR)${appdatadir}/${EMACS_NAME}.appdata.xml"; \
	rm -f $${tmp}
	thisdir=`/bin/pwd`; \
	cd ${iconsrcdir} || exit 1; umask 022 ; \
	for dir in */*/apps */*/mimetypes; do \
	  [ -d $${dir} ] || continue ; \
	  (cd "$${thisdir}"; ${MKDIR_P} "$(DESTDIR)${icondir}/$${dir}"); \
	  for icon in $${dir}/${EMACS_ICON}[.-]*; do \
	    [ -r $${icon} ] || continue ; \
	    ext=`echo "$${icon}" | $(SED) -e 's|.*\.||'`; \
	    dest=`echo "$${icon}" | $(SED) -e 's|.*/||' -e "s|\.$${ext}$$||" -e 's/$(EMACS_ICON)/emacs/' -e '$(TRANSFORM)'`.$${ext} ; \
	    ( cd "$${thisdir}"; \
	      ${INSTALL_DATA} ${iconsrcdir}/$${icon} "$(DESTDIR)${icondir}/$${dir}/$${dest}" ) \
	    || exit 1; \
	  done ; \
	done

### Build Emacs and install it, stripping binaries while installing them.
install-strip:
	$(MAKE) $(MFLAGS) INSTALL_STRIP=-s install

### Delete all the installed files that the `install' target would
### create (but not the noninstalled files such as `make all' would
### create).
###
### Do NOT delete the lisp and etc directories if they are in the source
### tree.
uninstall: uninstall-$(NTDIR) uninstall-doc
	cd lib-src && 					\
	 $(MAKE) $(MFLAGS) uninstall			\
	    prefix="${prefix}" exec_prefix="${exec_prefix}" \
	    bindir="${bindir}" libexecdir="${libexecdir}" \
	    archlibdir="${archlibdir}"

	-unset CDPATH; \
	for dir in "$(DESTDIR)${lispdir}" "$(DESTDIR)${etcdir}" ; do 	\
	  if [ -d "$${dir}" ]; then			\
	    case `cd "$${dir}" ; /bin/pwd` in		\
	      "`cd ${srcdir} ; /bin/pwd`"* ) ;;		\
	      * ) rm -rf "$${dir}" ;;			\
	    esac ;					\
	    case "$${dir}" in				\
	      "$(DESTDIR)${datadir}/emacs/${version}"/* )		\
	        rm -rf "$(DESTDIR)${datadir}/emacs/${version}"	\
	      ;;					\
	    esac ;					\
	  fi ;						\
	done
	-rm -rf "$(DESTDIR)${libexecdir}/emacs/${version}"
	thisdir=`/bin/pwd`; \
	(info_misc=`cd doc/misc && $(QUIET_SUBMAKE) $(MAKE) -s echo-info`; \
	 if cd "$(DESTDIR)${infodir}"; then \
	   for elt in ${INFO_NONMISC} $${info_misc}; do \
	     (cd "$${thisdir}"; \
	      $(INSTALL_INFO) --remove --info-dir="$(DESTDIR)${infodir}" "$(DESTDIR)${infodir}/$$elt"); \
	     if [ -n "${GZIP_PROG}" ]; then \
	        ext=.gz; else ext=""; fi; \
	     rm -f $$elt$$ext $$elt-[1-9]$$ext $$elt-[1-9][0-9]$$ext; \
	   done; \
	 fi)
	(if [ -n "${GZIP_PROG}" ]; then \
	    ext=.gz; else ext=""; fi; \
	 if cd ${mansrcdir}; then \
	   for page in *.1; do \
	     rm -f "$(DESTDIR)${man1dir}"/`echo "$${page}" | $(SED) -e 's/\.1$$//' -e '$(TRANSFORM)'`.1$${ext}; done; \
	 fi)
	(cd "$(DESTDIR)${bindir}" && rm -f $(EMACSFULL) $(EMACS) || true)
	(if cd "$(DESTDIR)${icondir}"; then \
	   rm -f hicolor/*x*/apps/${EMACS_NAME}.png \
	     hicolor/scalable/apps/${EMACS_NAME}.svg \
	     hicolor/scalable/mimetypes/`echo emacs-document | $(SED) '$(TRANSFORM)'`.svg; \
	fi)
	-rm -f "$(DESTDIR)${desktopdir}/${EMACS_NAME}.desktop"
	-rm -f "$(DESTDIR)${appdatadir}/${EMACS_NAME}.appdata.xml"
	for file in snake-scores tetris-scores; do \
	  file="$(DESTDIR)${gamedir}/$${file}"; \
	  [ -s "$${file}" ] || rm -f "$$file"; \
	done

### Windows-specific uninstall target for removing programs produced
### in nt/, and its Posix do-nothing shadow.
uninstall-:
uninstall-nt:
	cd $(NTDIR) && 					\
	 $(MAKE) $(MFLAGS) uninstall			\
	    prefix="${prefix}" exec_prefix="${exec_prefix}" \
	    bindir="${bindir}" libexecdir="${libexecdir}" \
	    archlibdir="${archlibdir}"

FRC:

# ==================== Cleaning up and miscellanea ====================

.PHONY: mostlyclean clean distclean bootstrap-clean maintainer-clean extraclean

### `mostlyclean'
###     Like `clean', but may refrain from deleting a few files that people
###     normally do NOT want to recompile.  For example, the `mostlyclean'
###     target for GCC does not delete `libgcc.a', because recompiling it
###     is rarely necessary and takes a lot of time.
mostlyclean: FRC
	cd src      && $(MAKE) $(MFLAGS) mostlyclean
	cd oldXMenu && $(MAKE) $(MFLAGS) mostlyclean
	cd lwlib    && $(MAKE) $(MFLAGS) mostlyclean
	cd lib      && $(MAKE) $(MFLAGS) mostlyclean
	cd lib-src  && $(MAKE) $(MFLAGS) mostlyclean
	cd nt       && $(MAKE) $(MFLAGS) mostlyclean
	-cd man     && $(MAKE) $(MFLAGS) mostlyclean
	-cd doc/emacs     && $(MAKE) $(MFLAGS) mostlyclean
	-cd doc/man       && $(MAKE) $(MFLAGS) mostlyclean
	-cd doc/misc      && $(MAKE) $(MFLAGS) mostlyclean
	-cd doc/lispref   && $(MAKE) $(MFLAGS) mostlyclean
	-cd doc/lispintro && $(MAKE) $(MFLAGS) mostlyclean

### `clean'
###      Delete all files from the current directory that are normally
###      created by building the program.  Do NOT delete the files that
###      record the configuration.  Also preserve files that could be made
###      by building, but normally are NOT because the distribution comes
###      with them.
###
###      Delete `.dvi' files here if they are not part of the distribution.
clean: FRC clean-local
	-rm -f etc/emacs.tmpdesktop
	cd src      && $(MAKE) $(MFLAGS) clean
	cd oldXMenu && $(MAKE) $(MFLAGS) clean
	cd lwlib    && $(MAKE) $(MFLAGS) clean
	cd lib      && $(MAKE) $(MFLAGS) clean
	cd lib-src  && $(MAKE) $(MFLAGS) clean
	cd nt       && $(MAKE) $(MFLAGS) clean
	-cd man     && $(MAKE) $(MFLAGS) clean
	-cd doc/emacs     && $(MAKE) $(MFLAGS) clean
	-cd doc/man       && $(MAKE) $(MFLAGS) clean
	-cd doc/misc      && $(MAKE) $(MFLAGS) clean
	-cd doc/lispref   && $(MAKE) $(MFLAGS) clean
	-cd doc/lispintro && $(MAKE) $(MFLAGS) clean
	-cd machocheck    && $(MAKE) $(MFLAGS) clean
	cd mac      && $(MAKE) $(MFLAGS) clean
	cd nextstep && $(MAKE) $(MFLAGS) clean

### `bootclean'
###      Delete all files that need to be remade for a clean bootstrap.
top_bootclean=\
	rm -f config.cache config.log
### `distclean'
###      Delete all files from the current directory that are created by
###      configuring or building the program.  If you have unpacked the
###      source and built the program without creating any other files,
###      `make distclean' should leave only the files that were in the
###      distribution.
top_distclean=\
	${top_bootclean}; \
	rm -f config.status config.log~ Makefile stamp-h1 ${SUBDIR_MAKEFILES}
distclean: FRC distclean-local
	cd src      && $(MAKE) $(MFLAGS) distclean
	cd oldXMenu && $(MAKE) $(MFLAGS) distclean
	cd lwlib    && $(MAKE) $(MFLAGS) distclean
	cd lib      && $(MAKE) $(MFLAGS) distclean
	cd lib-src  && $(MAKE) $(MFLAGS) distclean
	cd nt       && $(MAKE) $(MFLAGS) distclean
	cd man      && $(MAKE) $(MFLAGS) distclean
	cd doc/emacs     && $(MAKE) $(MFLAGS) distclean
	cd doc/man       && $(MAKE) $(MFLAGS) distclean
	cd doc/misc      && $(MAKE) $(MFLAGS) distclean
	cd doc/lispref   && $(MAKE) $(MFLAGS) distclean
	cd doc/lispintro && $(MAKE) $(MFLAGS) distclean
	cd leim     && $(MAKE) $(MFLAGS) distclean
	cd lisp     && $(MAKE) $(MFLAGS) distclean
	cd mac      && $(MAKE) $(MFLAGS) distclean
	cd nextstep && $(MAKE) $(MFLAGS) distclean
	for dir in test/automated admin/grammars admin/unidata; do \
	  [ ! -d $$dir ] || (cd $$dir && $(MAKE) $(MFLAGS) distclean); \
	done
	${top_distclean}

### `bootstrap-clean'
###   Delete everything that can be reconstructed by `make' and that
###   needs to be deleted in order to force a bootstrap from a clean state.
bootstrap-clean: FRC
	cd src      && $(MAKE) $(MFLAGS) bootstrap-clean
	cd oldXMenu && $(MAKE) $(MFLAGS) maintainer-clean
	cd lwlib    && $(MAKE) $(MFLAGS) maintainer-clean
	cd lib      && $(MAKE) $(MFLAGS) maintainer-clean
	cd lib-src  && $(MAKE) $(MFLAGS) maintainer-clean
	cd nt       && $(MAKE) $(MFLAGS) maintainer-clean
	-cd man     && $(MAKE) $(MFLAGS) maintainer-clean
	-cd doc/emacs     && $(MAKE) $(MFLAGS) maintainer-clean
	-cd doc/man       && $(MAKE) $(MFLAGS) maintainer-clean
	-cd doc/misc      && $(MAKE) $(MFLAGS) maintainer-clean
	-cd doc/lispref   && $(MAKE) $(MFLAGS) maintainer-clean
	-cd doc/lispintro && $(MAKE) $(MFLAGS) maintainer-clean
	cd leim     && $(MAKE) $(MFLAGS) bootstrap-clean
	cd lisp     && $(MAKE) $(MFLAGS) bootstrap-clean
	cd mac      && $(MAKE) $(MFLAGS) maintainer-clean
	cd nextstep && $(MAKE) $(MFLAGS) maintainer-clean
	for dir in test/automated admin/grammars admin/unidata; do \
	  [ ! -d $${dir} ] || (cd $${dir} && $(MAKE) $(MFLAGS) bootstrap-clean); \
	done
	[ ! -f config.log ] || mv -f config.log config.log~
	rm -rf ${srcdir}/info
	-rm -f bootstrap-stamp
	${top_bootclean}

### `maintainer-clean'
###     Delete everything from the current directory that can be
###     reconstructed with this Makefile.  This typically includes
###     everything deleted by distclean, plus more: C source files
###     produced by Bison, tags tables, info files, and so on.
###
###     One exception, however: `make maintainer-clean' should not delete
###     `configure' even if `configure' can be remade using a rule in the
###     Makefile. More generally, `make maintainer-clean' should not delete
###     anything that needs to exist in order to run `configure' and then
###     begin to build the program.
top_maintainer_clean=\
	${top_distclean}; \
	rm -fr autom4te.cache
maintainer-clean: bootstrap-clean FRC maintainer-clean-local
	cd src  && $(MAKE) $(MFLAGS) maintainer-clean
	cd leim && $(MAKE) $(MFLAGS) maintainer-clean
	cd lisp && $(MAKE) $(MFLAGS) maintainer-clean
	for dir in test/automated admin/grammars admin/unidata; do \
	  [ ! -d $${dir} ] || (cd $${dir} && $(MAKE) $(MFLAGS) maintainer-clean); \
	done
	-rm -f .DS_Store
	${top_maintainer_clean}

### This does NOT actually appear in the coding standards, but Karl
### says GCC supports it, and that is where the configuration part of
### the coding standards seem to come from.  It is like distclean, but
### it deletes backup and autosave files too.
extraclean: extraclean-local
	for i in ${SUBDIR}; do (cd $$i; $(MAKE) $(MFLAGS) extraclean); done
	${top_maintainer_clean}
	-rm -f config-tmp-*
	-rm -f *~ build-aux/*~ build-aux/snippet/*~ doc/*~ m4/*~ po/*~ \#*

# The src subdir knows how to do the right thing
# even when the build directory and source dir are different.
.PHONY: TAGS tags
TAGS tags: lib lib-src src
	cd src; $(MAKE) $(MFLAGS) tags

check: all
	@if test ! -d test/automated; then \
	  echo "You do not seem to have the test/ directory."; \
	  echo "Maybe you are using a release tarfile, rather than a repository checkout."; \
	else \
	  cd test/automated && $(MAKE) $(MFLAGS) check; \
	fi

dist: ${srcdir}/./make-dist
	cd ${srcdir}; ./make-dist

DVIS  = lispref-dvi  lispintro-dvi  emacs-dvi  misc-dvi
HTMLS = lispref-html lispintro-html emacs-html misc-html
INFOS = lispref-info lispintro-info emacs-info misc-info
PDFS  = lispref-pdf  lispintro-pdf  emacs-pdf  misc-pdf
PSS   = lispref-ps   lispintro-ps   emacs-ps   misc-ps

DOCS = $(DVIS) $(HTMLS) $(INFOS) $(PDFS) $(PSS)
$(DOCS):
	t=$@; IFS=-; set $$t; IFS=; cd doc/$$1 && $(MAKE) $(MFLAGS) $$2

.PHONY: $(DOCS) docs pdf ps
.PHONY: info dvi dist check html info-real info-dir force-info check-info

## TODO: add etc/refcards.
docs: $(DOCS)
dvi: $(DVIS)
html: $(HTMLS)
info-real: $(INFOS)
pdf: $(PDFS)
ps: $(PSS)

info-dir: ${srcdir}/info/dir

## Not strictly necessary, but speeds things up a bit by stopping
## the info-dir rule from running when not needed.
## Hopefully doc/misc/*.texi is not too long for some systems?
info_dir_deps = ${srcdir}/build-aux/dir_top \
	${srcdir}/doc/emacs/emacs.texi \
	${srcdir}/doc/lispintro/emacs-lisp-intro.texi \
	${srcdir}/doc/lispref/elisp.texi ${srcdir}/doc/misc/*.texi

## It would be much simpler if info/dir was only created in the
## installation location by the install-info rule, but we also
## need one in the source directory for people running uninstalled.
## FIXME: it would be faster to use the install-info program if we have it,
## but then we would need to depend on info-real, which would
## slow down parallelization.
${srcdir}/info/dir: ${info_dir_deps}
	${MKDIR_P} -v ${srcdir}/info
	tempfile=info-dir.$$$$; \
	rm -f $${tempfile}; \
	thisdir=`pwd`; \
	(cd ${srcdir} && 
	 AWK='${AWK}' ./build-aux/make-info-dir $${thisdir}/$${tempfile}); \
	${srcdir}/build-aux/move-if-change $${tempfile} ${srcdir}/info/dir

INSTALL_DVI = install-emacs-dvi install-lispref-dvi \
	install-lispintro-dvi install-misc-dvi
INSTALL_HTML = install-emacs-html install-lispref-html \
	install-lispintro-html install-misc-html
INSTALL_PDF = install-emacs-pdf install-lispref-pdf \
	install-lispintro-pdf install-misc-pdf
INSTALL_PS = install-emacs-ps install-lispref-ps \
	install-lispintro-ps install-misc-ps
INSTALL_DOC = $(INSTALL_DVI) $(INSTALL_HTML) $(INSTALL_PDF) $(INSTALL_PS)

## Install non .info forms of the documentation.
## TODO: add etc/refcards.
$(INSTALL_DOC):
	t=$@; IFS=-; set $$t; IFS=; cd doc/$$2 && $(MAKE) $(MFLAGS) $$1-$$3

.PHONY: $(INSTALL_DOC) install-doc
.PHONY: install-dvi install-html install-pdf install-ps

install-doc: $(INSTALL_DOC)
install-dvi: $(INSTALL_DVI)
install-html: $(INSTALL_HTML)
install-pdf: $(INSTALL_PDF)
install-ps: $(INSTALL_PS)


UNINSTALL_DVI = uninstall-emacs-dvi uninstall-lispref-dvi \
	uninstall-lispintro-dvi uninstall-misc-dvi
UNINSTALL_HTML = uninstall-emacs-html uninstall-lispref-html \
	uninstall-lispintro-html uninstall-misc-html
UNINSTALL_PDF = uninstall-emacs-pdf uninstall-lispref-pdf \
	uninstall-lispintro-pdf uninstall-misc-pdf
UNINSTALL_PS = uninstall-emacs-ps uninstall-lispref-ps \
	uninstall-lispintro-ps uninstall-misc-ps
UNINSTALL_DOC = $(UNINSTALL_DVI) $(UNINSTALL_HTML) $(UNINSTALL_PDF) $(UNINSTALL_PS)

$(UNINSTALL_DOC):
	t=$@; IFS=-; set $$t; IFS=; cd doc/$$2 && $(MAKE) $(MFLAGS) $$1-$$3

.PHONY: $(UNINSTALL_DOC) uninstall-doc
.PHONY: uninstall-dvi uninstall-html uninstall-pdf uninstall-ps

uninstall-doc: $(UNINSTALL_DOC)
uninstall-dvi: $(UNINSTALL_DVI)
uninstall-html: $(UNINSTALL_HTML)
uninstall-pdf: $(UNINSTALL_PDF)
uninstall-ps: $(UNINSTALL_PS)


force-info:
# Note that man/Makefile knows how to put the info files in $(srcdir),
# so we can do ok running make in the build dir.
# This used to have a clause that exited with an error if MAKEINFO = no.
# But it is inappropriate to do so without checking if makeinfo is
# actually needed - it is not if the info files are up-to-date.  (Bug#3982)
# Only the doc/*/Makefiles can decide that, so we let those rules run
# and give a standard error if makeinfo is needed but missing.
# While it would be nice to give a more detailed error message, that
# would require changing every rule in doc/ that builds an info file,
# and it is not worth it.  This case is only relevant if you download a
# release, then change the .texi files.
info: force-info
	@if test "$(HAVE_MAKEINFO)" = "no"; then \
	  echo "Configured --without-makeinfo, not building manuals" ; \
	else \
	  $(MAKE) $(MFLAGS) info-real info-dir; \
	fi

## build-aux/make-info-dir expects only certain dircategories.
check-info: info
	cd info; \
	bad=""; \
	for file in *; do \
	  test -f "$${file}" || continue ; \
	  case $${file} in \
	    *-[0-9]*|COPYING|dir) continue ;; \
	  esac ; \
	  cat=`$(SED) -n 's/^INFO-DIR-SECTION //p' $${file}`; \
	  case $${cat} in \
	   "Texinfo documentation system" | "Emacs"| "Emacs lisp" | \
           "Emacs editing modes" | "Emacs network features" | \
	   "Emacs misc features" | "Emacs lisp libraries" ) : ;; \
	   *)  bad="$${bad} $${file}" ;; \
	  esac; \
	done ; \
	if test -n "$${bad}"; then \
	  echo "Unexpected dircategory in: $${bad}" ; \
	  exit 1 ; \
	fi ; \
	echo "info files are OK"

#### Bootstrapping.

### This first cleans the lisp subdirectory, removing all compiled
### Lisp files.  Then re-run make to build all the files anew.

.PHONY: bootstrap

# Bootstrapping does the following:
#  * Remove files to start from a bootstrap-clean slate.
#  * Run autogen.sh.
#  * Rebuild Makefile, to update the build procedure itself.
#  * Do the actual build.
bootstrap: bootstrap-clean FRC
	cd $(srcdir) && ./autogen.sh
	$(MAKE) $(MFLAGS) MAKEFILE_NAME=force-Makefile force-Makefile
	$(MAKE) $(MFLAGS) info all

.PHONY: check-declare

check-declare:
	@if [ ! -f $(srcdir)/src/emacs ]; then \
	  echo "You must build Emacs to use this command"; \
	  exit 1; \
	fi
	cd lisp && $(MAKE) $(MFLAGS) $@

#### Apple

### Targets that the AppleMakefile wants:

install_source: AppleMakefile
	$(MAKE) $(MFLAGS) MAKEFILE_NAME=AppleMakefile -f AppleMakefile install_source

.PHONY: install_source

### Targets taken from the AppleMakefile:
bo.h: src/buildobj.lst
	printf "char bo[] = {\n" > $@
	hexdump -ve '1/1 "0x%02x,"' < src/buildobj.lst >> $@
	printf "};\n" >> $@

src/buildobj.lst: src/Makefile
	$(MAKE) -C src buildobj.lst

src/version.h: version.rb
	ruby version.rb emacs > src/version.h

isemacsvalid.o: isemacsvalid.c dumpemacs.h
	$(CC) -c $(CFLAGS) $(CPPFLAGS) $(WARN_CFLAGS) -o $@ isemacsvalid.c

machocheck/libmachocheck.a: Makefile machocheck/Makefile \
  machocheck/src/other/machochecker.cpp machocheck/src/other/machochecker.h
	$(MAKE) -C machocheck

# Leave off WARN_LDFLAGS from this; the fact that it uses C++ causes
# -Wl,-warn_weak_exports to print too many useless warnings:
isemacsvalid: isemacsvalid.c dumpemacs.h machocheck/libmachocheck.a \
  machocheck/src/other/machochecker.h
	$(CXX) $(CFLAGS) $(CPPFLAGS) $(CXXFLAGS) -Imachocheck/src/other \
	  -DSTANDALONE_ISEMACSVALID $(LDFLAGS) -Wall -Wextra \
	  $(WARN_CXXFLAGS) -g $(BETTER_DEBUG_CFLAGS) \
	  -o $@ isemacsvalid.c machocheck/libmachocheck.a

runit.o: runit.c dumpemacs.h
	$(CC) -c $(CFLAGS) $(BETTER_DEBUG_CFLAGS) $(CPPFLAGS) $(DEFS) \
	  -D_DEBUG $(WARN_CFLAGS) -Wundef -O0 -o $@ runit.c

GNUVersion = 22.1
@ifGNUmake@VERSIONDEFFLAG = -DkEmacsVersion=$(patsubst %,'"%"', $(GNUVersion))
@ifGNUmake@ifndef VERSIONDEFFLAG
VERSIONDEFFLAG = -DkEmacsVersion=\"$(version)\"
@ifGNUmake@endif

dumpemacs.o: bo.h dumpemacs.c dumpemacs.h src/version.h
	$(CC) -I. $(VERSIONDEFFLAG) $(BETTER_DEBUG_CFLAGS) $(CFLAGS) \
	  $(WARN_CFLAGS) -o $@ -g -c dumpemacs.c

dumpemacs: dumpemacs.o runit.o
	$(CC) $(CFLAGS) $(BETTER_DEBUG_CFLAGS) $(LDFLAGS) $(WARN_LDFLAGS) \
	  -o $@ -g -O0 $^

emacswrapper.o: emacswrapper.c dumpemacs.h
	$(CC) -c $(CFLAGS) $(CPPFLAGS) $(DEFS) -DDEBUG $(WARN_CFLAGS) \
	  $(BETTER_DEBUG_CFLAGS) -O0 -o $@ emacswrapper.c

emacswrapper: emacswrapper.o isemacsvalid.o runit.o
	$(CC) $(CFLAGS) $(BETTER_DEBUG_CFLAGS) $(LDFLAGS) $(WARN_LDFLAGS) \
	  -O0 -o $@ -g $^

test_mach_o_binary: test_mach_o_binary.c src/config.h src/lisp.h \
  lib/intprops.h
	$(CC) $(CFLAGS) $(CPPFLAGS) -Ilib -Isrc $(DEFS) $(WARN_CFLAGS) \
	  -Wformat=2 $(BETTER_DEBUG_CFLAGS) $(LDFLAGS) $(WARN_LDFLAGS) \
	  -O0 -o $@ -g $<

APPLE_AUX_EXES = dumpemacs emacswrapper isemacsvalid test_mach_o_binary

# umbrella target for the above:
apple_helper_executables: $(APPLE_AUX_EXES)
	stat dumpemacs
	stat emacswrapper
	stat isemacsvalid
	stat test_mach_o_binary
.PHONY: apple_helper_executables

.SUFFIXES: .c .plist
.c.plist:
	@if test ! -d $(analysisdir); then $(MKDIR_P) $(analysisdir); fi
	$(RUN_CLANG_ANALYZER) -Wall -Wextra -o $(analysisdir)/$@ $< 

apple_check: isemacsvalid.plist runit.plist dumpemacs.plist \
  emacswrapper.plist test_mach_o_binary.plist @MAINT@ unexmacosx.plist
	if test -x test_mach_o_binary; then ./test_mach_o_binary; fi
.PHONY: apple_check

### To avoid lisp byte-compilation errors, try this:
# (make globals.h early to prevent errors)
only_temacs: src/Makefile @MAINT@ $(SUBDIR_REALLY_ONLY_C)
	$(MAKE) -C src globals.h
	$(MAKE) -C src temacs
.PHONY: only_temacs

# might also need this:
gnulib_headers: lib/Makefile
	$(MAKE) -C lib headers
.PHONY: gnulib-headers

### Targets for in case we convert to automake:
clean-local:
	rm -f bo.h $(APPLE_AUX_EXES) *.o
	rm -rf *.dSYM || rmdir *.dSYM
.PHONY: clean-local

distclean-local: clean-local
	rm -rf autom4te.cache || rmdir autom4te.cache
	if test -e ldd.sh; then rm -f ldd.sh; fi
.PHONY: distclean-local

maintainer-clean-local: distclean-local
	rm -f configure*.scan autoscan.log
.PHONY: maintainer-clean-local

extraclean-local: maintainer-clean-local
	-find . -name .DS_Store -delete 2>/dev/null
.PHONY: extraclean-local
