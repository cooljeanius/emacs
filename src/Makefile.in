### @configure_input@

# Copyright (C) 1985, 1987-1988, 1993-1995, 1999-2014 Free Software
# Foundation, Inc.

# This file is part of GNU Emacs.

# GNU Emacs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# GNU Emacs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.


# Note that this file is edited by msdos/sed1v2.inp for MSDOS.  That
# script may need modifying in sync with changes made here.  Try to
# avoid shell-ism because the DOS build has to use the DOS shell.

SHELL = @SHELL@

# Here are the things that we expect ../configure to edit.
# We use $(srcdir) explicitly in dependencies so as not to depend on VPATH.
srcdir = @srcdir@
top_srcdir = @top_srcdir@
# MinGW CPPFLAGS may use this.
abs_top_srcdir=@abs_top_srcdir@
ntsource = $(srcdir)/../nt
VPATH = $(srcdir)
SRCROOT = @SRCROOT@
CC = @CC@
WINDRES = @WINDRES@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
DEFS = @DEFS@
LDFLAGS = @LDFLAGS@
OBJC = @OBJC@
OBJCFLAGS = @OBJCFLAGS@
OBJCPPFLAGS = @OBJCPPFLAGS@
DSYMUTIL = @DSYMUTIL@
EXEEXT = @EXEEXT@
FILE_MAGIC_BIN = @FILE_MAGIC_BIN@
GREP = @GREP@
LIPO = @LIPO@
MACHOCHECK = @MACHOCHECK@
RC_ARCHS = @RC_ARCHS@
SED = @SED@
version = @version@
# Substitute an assignment for the MAKE variable, because
# BSD does NOT have it as a default.
@SET_MAKE@
MKDIR_P = @MKDIR_P@
# Do NOT use LIBS.  configure puts stuff in it that either should NOT be
# linked with Emacs or is duplicated by the other stuff below.
BAD_LIBS_THAT_SHOULD_BE_COMMENTED_OUT = @LIBS@
# trying to debug something here:
LIBS = $(BAD_LIBS_THAT_SHOULD_BE_COMMENTED_OUT)
LIBOBJDIR = @LIBOBJDIR@
LIBOBJS = @LIBOBJS@

CLANG_ANALYZER = @CLANG_ANALYZER@

PRE_WARNING_TESTING_CFLAGS = @PRE_WARNING_TESTING_CFLAGS@

# Instead of setting CFLAGS in here, use the one for the correct language
# farther below instead:
RUN_CLANG_ANALYZER = $(CLANG_ANALYZER) $(DEFS) $(CPPFLAGS) \
  -Demacs $(MYCPPFLAGS) -I. -I../lib --analyze

lispsource = $(srcdir)/../lisp
lib = ../lib
libsrc = ../lib-src
etc = ../etc
leimdir = ${lispsource}/leim
oldXMenudir = ../oldXMenu
lwlibdir = ../lwlib
builddir = @builddir@
analysisdir = $(builddir)/clang_static_analysis

# Configuration files for .o files to depend on.
config_h = config.h $(srcdir)/conf_post.h

bootstrap_exe = ../src/bootstrap-emacs$(EXEEXT)

## macosx-app if HAVE_CARBON, ns-app if HAVE_NS, else empty.
OTHER_FILES = @OTHER_FILES@

## Flags to pass for profiling builds
PROFILING_CFLAGS = @PROFILING_CFLAGS@

## Flags to pass to the compiler to enable build warnings, and stuff:
WARN_CFLAGS = @WARN_CFLAGS@
WERROR_CFLAGS = @WERROR_CFLAGS@
WARN_LDFLAGS = @WARN_LDFLAGS@
BETTER_DEBUG_CFLAGS = @BETTER_DEBUG_CFLAGS@

## Machine-specific CFLAGS.
C_SWITCH_MACHINE=@C_SWITCH_MACHINE@
## System-specific CFLAGS.
C_SWITCH_SYSTEM=@C_SWITCH_SYSTEM@

MAC_CFLAGS=@MAC_CFLAGS@
GNUSTEP_CFLAGS=@GNUSTEP_CFLAGS@
PNG_CFLAGS=@PNG_CFLAGS@

## Define C_SWITCH_X_SITE to contain any special flags your compiler
## may need to deal with X Windows.  For instance, if you have defined
## HAVE_X_WINDOWS and your X include files are NOT in a place that your
## compiler can find on its own, you might want to add "-I/..." or
## something similar.  This is normally set by configure.
C_SWITCH_X_SITE=@C_SWITCH_X_SITE@

## Define LD_SWITCH_X_SITE to contain any special flags your loader
## may need to deal with X Windows.  For instance, if your X libraries
## are NOT in a place that your loader can find on its own, you might
## want to add "-L/..." or something similar.  Only used if
## HAVE_X_WINDOWS.
## FIXME? configure sets a value for this, but it has never been
## substituted in this or any other Makefile. Cf C_SWITCH_X_SITE.
LD_SWITCH_X_SITE=

## This must come before LD_SWITCH_SYSTEM.
## If needed, a -rpath option that says where to find X windows at run time.
LD_SWITCH_X_SITE_RPATH=@LD_SWITCH_X_SITE_RPATH@

## System-specific LDFLAGS.
LD_SWITCH_SYSTEM=@LD_SWITCH_SYSTEM@

## This holds any special options for linking temacs only (i.e., not
## used by configure).
LD_SWITCH_SYSTEM_TEMACS=@LD_SWITCH_SYSTEM_TEMACS@

## Flags to pass to ld only for temacs.
TEMACS_LDFLAGS = $(LD_SWITCH_SYSTEM) $(LD_SWITCH_SYSTEM_TEMACS) \
  $(WARN_LDFLAGS)

## If available, the names of the paxctl and setfattr programs.
## On grsecurity/PaX systems, unexec will fail due to a gap between
## the bss section and the heap.  Older versions need paxctl to work
## around this, newer ones setfattr.  See Bug#11398 and Bug#16343.
PAXCTL = @PAXCTL@
SETFATTR = @SETFATTR@

## Some systems define this to request special libraries.
LIBS_SYSTEM=@LIBS_SYSTEM@

## -lm, or empty.
LIB_MATH=@LIB_MATH@

## -lpthreads, or empty.
LIB_PTHREAD=@LIB_PTHREAD@

LIBIMAGE=@LIBTIFF@ @LIBJPEG@ @LIBPNG@ @LIBGIF@ @LIBXPM@

XFT_LIBS=@XFT_LIBS@
LIBX_EXTRA=-lX11 $(XFT_LIBS)

FONTCONFIG_CFLAGS = @FONTCONFIG_CFLAGS@
FONTCONFIG_LIBS = @FONTCONFIG_LIBS@
FREETYPE_CFLAGS = @FREETYPE_CFLAGS@
FREETYPE_LIBS = @FREETYPE_LIBS@
LIBOTF_CFLAGS = @LIBOTF_CFLAGS@
LIBOTF_LIBS = @LIBOTF_LIBS@
M17N_FLT_CFLAGS = @M17N_FLT_CFLAGS@
M17N_FLT_LIBS = @M17N_FLT_LIBS@

LIB_ACL=@LIB_ACL@
LIB_CLOCK_GETTIME=@LIB_CLOCK_GETTIME@
LIB_EACCESS=@LIB_EACCESS@
LIB_FDATASYNC=@LIB_FDATASYNC@
LIB_TIMER_TIME=@LIB_TIMER_TIME@

DBUS_CFLAGS = @DBUS_CFLAGS@
DBUS_LIBS = @DBUS_LIBS@
## dbusbind.o if HAVE_DBUS, else empty.
DBUS_OBJ = @DBUS_OBJ@

LIB_EXECINFO=@LIB_EXECINFO@

SETTINGS_CFLAGS = @SETTINGS_CFLAGS@
SETTINGS_LIBS = @SETTINGS_LIBS@

## gtkutil.o if USE_GTK, else empty.
GTK_OBJ=@GTK_OBJ@

## gfilenotify.o if HAVE_GFILENOTIFY.
## inotify.o if HAVE_INOTIFY.
## w32notify.o if HAVE_W32NOTIFY.
NOTIFY_OBJ = @NOTIFY_OBJ@
GFILENOTIFY_CFLAGS = @GFILENOTIFY_CFLAGS@
GFILENOTIFY_LIBS = @GFILENOTIFY_LIBS@

## -ltermcap, or -lncurses, or -lcurses, or "".
LIBS_TERMCAP=@LIBS_TERMCAP@
## terminfo.o if TERMINFO, else tparam.o.
TERMCAP_OBJ=@TERMCAP_OBJ@

LIBXMU=@LIBXMU@

LIBXSM=@LIBXSM@

LIBXTR6=@LIBXTR6@

## $(LIBXMU) -lXt $(LIBXTR6) -lXext if USE_X_TOOLKIT, else $(LIBXSM).
## Only used if HAVE_X_WINDOWS.
LIBXT_OTHER=@LIBXT_OTHER@

## If !HAVE_X11 || USE_GTK, empty.
## Else if USE_X_TOOLKIT, $(lwlibdir)/liblw.a.
## Else $(oldXMenudir)/libXMenu11.a.
LIBXMENU=@LIBXMENU@

## xmenu.o if HAVE_X_WINDOWS, else empty.
XMENU_OBJ=@XMENU_OBJ@
## xterm.o xfns.o xselect.o xrdb.o xsmfns.o xsettings.o if
## HAVE_X_WINDOWS, else empty.
XOBJ=@XOBJ@

# xgselect.o if linking with GLib, else empty
XGSELOBJ=@XGSELOBJ@

TOOLKIT_LIBW=@TOOLKIT_LIBW@

## Only used if HAVE_X11, in LIBX_OTHER.
LIBXT=$(TOOLKIT_LIBW) $(LIBXT_OTHER)

## If HAVE_X11, $(LIBXT) $(LIBX_EXTRA), else empty.
LIBX_OTHER=@LIBX_OTHER@

## LIBXMENU is empty if !HAVE_X_WINDOWS.
## LD_SWITCH_X_SITE should not be used if not using X, but nothing
## sets it at present, and if something ever does, it should be
## configure, which should set it to nil in non-X builds.
LIBX_BASE=$(LIBXMENU) $(LD_SWITCH_X_SITE)

## Only used for GNUstep
LIBS_GNUSTEP=@LIBS_GNUSTEP@

LIBSOUND= @LIBSOUND@
CFLAGS_SOUND= @CFLAGS_SOUND@

RSVG_LIBS= @RSVG_LIBS@
RSVG_CFLAGS= @RSVG_CFLAGS@

IMAGEMAGICK_LIBS= @IMAGEMAGICK_LIBS@
IMAGEMAGICK_CFLAGS= @IMAGEMAGICK_CFLAGS@

LIBXML2_LIBS = @LIBXML2_LIBS@
LIBXML2_CFLAGS = @LIBXML2_CFLAGS@

LIBZ = @LIBZ@

XRANDR_LIBS = @XRANDR_LIBS@
XRANDR_CFLAGS = @XRANDR_CFLAGS@

XINERAMA_LIBS = @XINERAMA_LIBS@
XINERAMA_CFLAGS = @XINERAMA_CFLAGS@

XFIXES_LIBS = @XFIXES_LIBS@
XFIXES_CFLAGS = @XFIXES_CFLAGS@

## widget.o if USE_X_TOOLKIT, otherwise empty.
WIDGET_OBJ=@WIDGET_OBJ@

## sheap.o if CYGWIN, otherwise empty.
CYGWIN_OBJ=@CYGWIN_OBJ@

#ifdef HAVE_CARBON
dot = .
dotdot = ${dot}${dot}
mac = $(dot)$(dot)/mac/
##FIXME: make these objects configurable from the configure script:
MAC_OBJ = mac.o macterm.o macfns.o macmenu.o macselect.o fontset.o fringe.o image.o
## as a start towards the above, compare this with the previous,
## and make sure they come out the same:
MAC_OBJ_SUBSTED = @MAC_OBJ@
## macappkit.o if HAVE_CARBON, otherwise empty.
MAC_OBJC_OBJ=@MAC_OBJC_OBJ@
emacsapp = $(PWD)/$(mac)Emacs.app/
emacsappsrc = ${srcdir}/../mac/Emacs.app/
#endif /* HAVE_CARBON */

## fontset.o fringe.o image.o if we have any window system
WINDOW_SYSTEM_OBJ=@WINDOW_SYSTEM_OBJ@

## dosfns.o msdos.o w16select.o if MSDOS.
#ifdef MSDOS
#ifdef HAVE_X_WINDOWS
MSDOS_OBJ = @MAINT@ dosfns.o msdos.o
#else
MSDOS_OBJ = @MAINT@ dosfns.o msdos.o w16select.o
#endif /* HAVE_X_WINDOWS */
#endif /* MSDOS */
## w16select.o termcap.o if MSDOS && HAVE_X_WINDOWS.
#ifdef MSDOS
#ifdef HAVE_X_WINDOWS
MSDOS_X_OBJ = @MAINT@ w16select.o termcap.o
#endif /* HAVE_X_WINDOWS */
#endif /* MSDOS */

NS_OBJ=@NS_OBJ@
## nsterm.o nsfns.o nsmenu.o nsselect.o nsimage.o nsfont.o macfont.o if HAVE_NS.
NS_OBJC_OBJ=@NS_OBJC_OBJ@
## Only set if NS_IMPL_GNUSTEP.
GNU_OBJC_CFLAGS=@GNU_OBJC_CFLAGS@
## w32fns.o w32menu.c w32reg.o fringe.o fontset.o w32font.o w32term.o
## w32xfns.o w32select.o image.o w32uniscribe.o if HAVE_W32, else
## empty.
W32_OBJ=@W32_OBJ@
## -lkernel32 -luser32 -lgdi32 -lole32 -lcomdlg32 lusp10 -lcomctl32
## -lwinspool if HAVE_W32, else empty.
W32_LIBS=@W32_LIBS@

## emacs.res if HAVE_W32
EMACSRES = @EMACSRES@
## emacs-*.manifest if HAVE_W32
EMACS_MANIFEST = @EMACS_MANIFEST@
## If HAVE_W32, compiler arguments for including
## the resource file in the binary.
## Cygwin: -Wl,emacs.res
## MinGW: emacs.res
W32_RES_LINK=@W32_RES_LINK@

## Empty if !HAVE_X_WINDOWS
## xfont.o ftfont.o xftfont.o ftxfont.o if HAVE_XFT
## xfont.o ftfont.o ftxfont.o if HAVE_FREETYPE
## else xfont.o
FONT_OBJ=@FONT_OBJ@

## Empty for MinGW, cm.o for the rest.
CM_OBJ=@CM_OBJ@

LIBGPM = @LIBGPM@

## -lresolv, or empty.
LIBRESOLV = @LIBRESOLV@

LIBSELINUX_LIBS = @LIBSELINUX_LIBS@

LIBGNUTLS_LIBS = @LIBGNUTLS_LIBS@
LIBGNUTLS_CFLAGS = @LIBGNUTLS_CFLAGS@

LIB_PTHREAD_SIGMASK = @LIB_PTHREAD_SIGMASK@

INTERVAL_SRC = intervals.h composite.h
INTERVALS_H = dispextern.h $(INTERVAL_SRC)

## gnulib-tool says it might be necessary to use the following Makefile
## variables when linking:
GETLOADAVG_LIBS = @GETLOADAVG_LIBS@
# (LIB_ACL is already done above)
# (LIB_CLOCK_GETTIME is already done above)
LIB_CRYPTO = @LIB_CRYPTO@
# (LIB_EACCESS is already done above)
# (LIB_EXECINFO is already done above)
# (LIB_FDATASYNC is already done above)
# (LIB_PTHREAD_SIGMASK is already done above)
LIB_SELECT = @LIB_SELECT@
LIB_THREADED_SELECT = $(LIB_SELECT) $(LIB_PTHREAD_SIGMASK)
# (LIB_TIMER_TIME is already done above)
LTLIBINTL = @LTLIBINTL@
LIBINTL = @LIBINTL@
NEXTAFTER_LIBM = @NEXTAFTER_LIBM@
LIBM = @LIBM@
LIBM_WITH_NEXTAFTER = $(LIBM) $(NEXTAFTER_LIBM)
OPENMP_CFLAGS = @OPENMP_CFLAGS@

RUN_TEMACS = ./temacs

## Invoke ../nt/addsection for MinGW, "echo" elsewhere.
TEMACS_POST_LINK = @TEMACS_POST_LINK@
ADDSECTION = @ADDSECTION@
EMACS_HEAPSIZE = @EMACS_HEAPSIZE@
MINGW_TEMACS_POST_LINK = \
 mv -v temacs$(EXEEXT) temacs.tmp; \
 ../nt/addsection temacs.tmp temacs$(EXEEXT) EMHEAP $(EMACS_HEAPSIZE)

UNEXEC_OBJ = @UNEXEC_OBJ@

CANNOT_DUMP=@CANNOT_DUMP@

# 'make' verbosity.
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@

AM_V_CC = $(am__v_CC_@AM_V@)
am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 =

AM_V_OBJC = $(am__v_OBJC_@AM_V@)
am__v_OBJC_ = $(am__v_OBJC_@AM_DEFAULT_V@)
am__v_OBJC_0 = @echo "  OBJC      " $@;
am__v_OBJC_1 =

AM_V_CCLD = $(am__v_CCLD_@AM_V@)
am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 =

AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 =

AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 =

AM_V_v = $(am__v_v_@AM_V@)
am__v_v_ = $(am__v_v_@AM_DEFAULT_V@)
am__v_v_0 =
am__v_v_1 = -v

DEPDIR=deps
## -MMD -MF $(DEPDIR)/$*.d if AUTO_DEPEND; else empty.
DEPFLAGS=@DEPFLAGS@
## ${MKDIR_P} ${DEPDIR} (if AUTO_DEPEND); else 'echo'.
MKDEPDIR=@MKDEPDIR@

## DO NOT use -R.  There is a special hack described in lastfile.c
## which is used instead.  Some initialized data areas are modified
## at initial startup, then labeled as part of the text area when
## Emacs is dumped for the first time, and never changed again.
##
## -Demacs is needed to make some files produce the correct version
## for use in Emacs.
##
## FIXME? MYCPPFLAGS only referenced in etc/DEBUG.
ALL_CFLAGS=-Demacs $(MYCPPFLAGS) -I. -I$(srcdir) \
  -I$(lib) -I$(srcdir)/../lib \
  $(C_SWITCH_MACHINE) $(C_SWITCH_SYSTEM) $(C_SWITCH_X_SITE) \
  $(MAC_CFLAGS) $(GNUSTEP_CFLAGS) $(CFLAGS_SOUND) $(RSVG_CFLAGS) \
  $(IMAGEMAGICK_CFLAGS) $(PNG_CFLAGS) $(LIBXML2_CFLAGS) $(DBUS_CFLAGS) \
  $(XRANDR_CFLAGS) $(XINERAMA_CFLAGS) $(XFIXES_CFLAGS) \
  $(SETTINGS_CFLAGS) $(FREETYPE_CFLAGS) $(FONTCONFIG_CFLAGS) \
  $(LIBOTF_CFLAGS) $(M17N_FLT_CFLAGS) $(DEPFLAGS) \
  $(LIBGNUTLS_CFLAGS) $(GFILENOTIFY_CFLAGS) \
  $(WARN_CFLAGS) $(BETTER_DEBUG_CFLAGS) $(CFLAGS) @MAINT@ $(WERROR_CFLAGS)
ALL_OBJC_CFLAGS=$(ALL_CFLAGS) $(GNU_OBJC_CFLAGS)

SUFFIXES = .c .o .m .plist

.SUFFIXES: .m
.c.o:
	@$(MKDEPDIR)
	$(AM_V_CC)$(CC) -c $(CPPFLAGS) $(ALL_CFLAGS) $(PROFILING_CFLAGS) $<
.m.o:
	@$(MKDEPDIR)
	$(AM_V_OBJC)$(CC) -c $(CPPFLAGS) $(ALL_OBJC_CFLAGS) \
	  $(PROFILING_CFLAGS) $<

.SUFFIXES: .c .m .plist
.c.plist:
	@if test ! -d $(analysisdir); then $(MKDIR_P) $(analysisdir); fi
	$(RUN_CLANG_ANALYZER) $(PRE_WARNING_TESTING_CFLAGS) \
	  $(CLANG_CPPFLAGS) -o $(analysisdir)/$@ $< 

.m.plist:
	@if test ! -d $(analysisdir); then $(MKDIR_P) $(analysisdir); fi
	$(RUN_CLANG_ANALYZER) $(OBJCFLAGS) -o $(analysisdir)/$@ $< 

## lastfile must follow all files whose initialized data areas should
## be dumped as pure by dump-emacs.
base_obj = dispnew.o frame.o scroll.o xdisp.o menu.o $(XMENU_OBJ) \
	window.o charset.o coding.o category.o ccl.o character.o \
	chartab.o bidi.o $(CM_OBJ) term.o terminal.o xfaces.o \
	$(XOBJ) $(GTK_OBJ) $(DBUS_OBJ) \
	emacs.o keyboard.o macros.o keymap.o sysdep.o \
	buffer.o filelock.o insdel.o marker.o \
	minibuf.o fileio.o dired.o \
	cmds.o casetab.o casefiddle.o indent.o search.o regex.o undo.o \
	alloc.o data.o doc.o editfns.o callint.o \
	eval.o floatfns.o fns.o font.o print.o lread.o \
	syntax.o $(UNEXEC_OBJ) bytecode.o \
	process.o gnutls.o callproc.o \
	region-cache.o sound.o atimer.o \
	doprnt.o intervals.o textprop.o composite.o xml.o $(NOTIFY_OBJ) \
	profiler.o decompress.o \
	$(MSDOS_OBJ) $(MSDOS_X_OBJ) $(NS_OBJ) $(CYGWIN_OBJ) $(FONT_OBJ) \
	$(W32_OBJ) $(WINDOW_SYSTEM_OBJ) $(XGSELOBJ)
old_obj = abbrev.o filemode.o alloca.o ecrt0.o \
	getloadavg.o @MAINT@ strftime.o md5.o # $(MAC_OBJ)
obj = $(base_obj) $(MAC_OBJC_OBJ) $(NS_OBJC_OBJ) $(MAC_OBJ_SUBSTED) \
	$(old_obj)

## Object files used on some machine or other.
## These go in the DOC file on all machines in case they are needed.
## Some of them have no DOC entries, but it does no harm to have them
## in the list, in case they ever add any such entries.
SOME_MACHINE_OBJECTS = dosfns.o msdos.o \
  xterm.o xfns.o xmenu.o xselect.o xrdb.o xsmfns.o fringe.o image.o \
  mac.o macterm.o macfns.o macmenu.o macselect.o fontset.o dbusbind.o \
  nsterm.o nsfns.o nsmenu.o nsselect.o nsimage.o nsfont.o macfont.o \
  cygw32.o w32.o w32console.o w32fns.o w32heap.o w32inevt.o w32notify.o \
  w32menu.o w32proc.o w32reg.o w32select.o w32term.o w32xfns.o \
  w16select.o widget.o xfont.o ftfont.o xftfont.o ftxfont.o gtkutil.o \
  xsettings.o xgselect.o termcap.o @MAINT@ $(EXTRA_MACHINE_OBJECTS)

EXTRA_MACHINE_OBJECTS = pre-crt0.o sunfns.o w32bdf.o \
  vmsfns.o vmsgmalloc.o vmsmap.o

## gmalloc.o if !SYSTEM_MALLOC && !DOUG_LEA_MALLOC, else empty.
GMALLOC_OBJ=@GMALLOC_OBJ@

## vm-limit.o if !SYSTEM_MALLOC, else empty.
VMLIMIT_OBJ=@VMLIMIT_OBJ@

## ralloc.o if !SYSTEM_MALLOC && REL_ALLOC, else empty.
RALLOC_OBJ=@RALLOC_OBJ@

## Empty on Cygwin and MinGW, lastfile.o elsewhere.
PRE_ALLOC_OBJ=@PRE_ALLOC_OBJ@
## lastfile.o on Cygwin and MinGW, empty elsewhere.
POST_ALLOC_OBJ=@POST_ALLOC_OBJ@

## List of object files that make-docfile should not be told about.
otherobj= $(TERMCAP_OBJ) $(PRE_ALLOC_OBJ) $(GMALLOC_OBJ) $(RALLOC_OBJ) \
  $(POST_ALLOC_OBJ) $(WIDGET_OBJ) $(LIBOBJS)

## All object files linked into temacs.  $(VMLIMIT_OBJ) should be first.
## (On MinGW, firstfile.o should be before vm-limit.o.)
FIRSTFILE_OBJ=@FIRSTFILE_OBJ@
ALLOBJS = $(FIRSTFILE_OBJ) $(VMLIMIT_OBJ) $(obj) $(otherobj)

ALLPLISTS = `echo $(ALLOBJS) | $(SED) -e 's/\.o/\.plist/g'`

## Configure inserts the file lisp.mk at this point, defining $lisp.
@lisp_frag@


## Construct full set of libraries to be linked.
LIBES = $(LIBS) $(W32_LIBS) $(LIBS_GNUSTEP) $(LIBX_BASE) $(LIBIMAGE) \
   $(LIBX_OTHER) $(LIBSOUND) $(LIB_CRYPTO) $(OPENMP_CFLAGS) \
   $(RSVG_LIBS) $(IMAGEMAGICK_LIBS) $(LIB_ACL) $(LIB_CLOCK_GETTIME) \
   $(LIB_EACCESS) $(LIB_FDATASYNC) $(LIB_TIMER_TIME) $(DBUS_LIBS) \
   $(LIB_EXECINFO) $(XRANDR_LIBS) $(XINERAMA_LIBS) $(XFIXES_LIBS) \
   $(LIBXML2_LIBS) $(LIBGPM) $(LIBRESOLV) $(LIBS_SYSTEM) $(LIBINTL) \
   $(LIBS_TERMCAP) $(GETLOADAVG_LIBS) $(SETTINGS_LIBS) $(LIBSELINUX_LIBS) \
   $(FREETYPE_LIBS) $(FONTCONFIG_LIBS) $(LIBOTF_LIBS) $(M17N_FLT_LIBS) \
   $(LIBGNUTLS_LIBS) $(LIB_PTHREAD) $(LIB_THREADED_SELECT) \
   $(GFILENOTIFY_LIBS) $(LIB_MATH) $(LIBZ) $(LIBM_WITH_NEXTAFTER)

all: emacs$(EXEEXT) $(OTHER_FILES)
.PHONY: all

check: gnulib_headers getloadavg_test$(EXEEXT)
	$(MAKE) $(ALLPLISTS)
.PHONY: check

$(leimdir)/leim-list.el: bootstrap-emacs$(EXEEXT)
	cd ../leim && $(MAKE) $(MFLAGS) leim-list.el EMACS="$(bootstrap_exe)"

$(lispsource)/international/charprop.el: bootstrap-emacs$(EXEEXT)
	cd ../admin/unidata && $(MAKE) $(MFLAGS) all EMACS="../$(bootstrap_exe)"

## FORCE it so that admin/unidata can decide whether this file
## is up-to-date.
$(srcdir)/macuvs.h: bootstrap-emacs$(EXEEXT) @MAINT@ FORCE
	$(MAKE) -C ../admin/unidata all EMACS="../$(bootstrap_exe)"

#ifdef HAVE_SHM
NL=-nl
#endif /* HAVE_SHM */

## The dumped Emacs is as functional and more efficient than
## bootstrap-emacs, so we replace the latter with the former.
## Strictly speaking, emacs does not depend directly on all of ${lisp},
## since not all pieces are used on all platforms.  But DOC depends
## on all of ${lisp}, and emacs depends on DOC, so it is okay to use
## ${lisp} here.
## I should be done merging now... yikes, this is confusing...
emacs$(EXEEXT): temacs$(EXEEXT) $(ADDSECTION) \
                $(etc)/DOC $(lisp) $(leimdir)/leim-list.el \
                $(lispsource)/international/charprop.el
@GNU_MAKE_TRUE@#ifdef CANNOT_DUMP
@GNU_MAKE_TRUE@	if test "x$(CANNOT_DUMP)" = "xyes"; then \
@GNU_MAKE_TRUE@	  rm -f emacs${EXEEXT}; \
@GNU_MAKE_TRUE@	  ln $(AM_V_v) temacs${EXEEXT} emacs${EXEEXT}; \
@GNU_MAKE_TRUE@	fi
@GNU_MAKE_TRUE@#else
@GNU_MAKE_TRUE@#undef i386
@GNU_MAKE_TRUE@	@if test "x$(CANNOT_DUMP)" = "xyes"; then \
@GNU_MAKE_TRUE@	   echo "Warning: trying to dump even though we cannot, due to ambiguity between various kinds of conditionals." >&2; \
@GNU_MAKE_TRUE@	 fi
@GNU_MAKE_TRUE@ifneq (1,$(words $(RC_ARCHS)))
@GNU_MAKE_TRUE@	mv $(AM_V_v) temacs emacs-undumped
@GNU_MAKE_TRUE@ifeq (i386,$(filter i386,$(RC_ARCHS)))
@GNU_MAKE_TRUE@	$(LIPO) -thin i386 -output temacs emacs-undumped
@GNU_MAKE_TRUE@	LC_ALL=C $(RUN_TEMACS) $(NL) -batch -l loadup dump || false
@GNU_MAKE_TRUE@	mv $(AM_V_v) emacs arch/emacs-i386
@GNU_MAKE_TRUE@	rm -f emacs-[0-9]* # avoid DOC-xx incrementing
@GNU_MAKE_TRUE@endif
@GNU_MAKE_TRUE@ifeq (x86_64,$(filter x86_64,$(RC_ARCHS)))
@GNU_MAKE_TRUE@	$(LIPO) -thin x86_64 -output temacs emacs-undumped
@GNU_MAKE_TRUE@	LC_ALL=C $(RUN_TEMACS) $(NL) -batch -l loadup dump || false
@GNU_MAKE_TRUE@	mv $(AM_V_v) emacs arch/emacs-x86_64
@GNU_MAKE_TRUE@	rm -f emacs-[0-9]* # avoid DOC-xx incrementing
@GNU_MAKE_TRUE@endif
@GNU_MAKE_TRUE@	$(LIPO) -create -output emacs "arch/"*
@GNU_MAKE_TRUE@	cp $(AM_V_v) emacs-undumped temacs
@GNU_MAKE_TRUE@else
@GNU_MAKE_TRUE@	cp $(AM_V_v) temacs emacs-undumped
@GNU_MAKE_TRUE@	LC_ALL=C $(RUN_TEMACS) $(NL) -batch -l loadup dump || false
@GNU_MAKE_TRUE@endif
@GNU_MAKE_TRUE@#endif /* ! defined (CANNOT_DUMP) */
@GNU_MAKE_TRUE@	-./emacs -q -batch -f list-load-path-shadows
@GNU_MAKE_FALSE@	if test "x$(CANNOT_DUMP)" = "xyes"; then \
@GNU_MAKE_FALSE@	  rm -f emacs$(EXEEXT); \
@GNU_MAKE_FALSE@	  ln $(AM_V_v) temacs$(EXEEXT) emacs$(EXEEXT); \
@GNU_MAKE_FALSE@	else \
@GNU_MAKE_FALSE@	  LC_ALL=C $(RUN_TEMACS) -batch -l loadup dump || exit 1; \
@GNU_MAKE_FALSE@	  test "X$(PAXCTL)" = "X" || $(PAXCTL) -zex emacs$(EXEEXT); \
@GNU_MAKE_FALSE@	  rm -f bootstrap-emacs$(EXEEXT); \
@GNU_MAKE_FALSE@	  ln -v emacs$(EXEEXT) bootstrap-emacs$(EXEEXT); \
@GNU_MAKE_FALSE@	fi

## We run make-docfile twice because the command line may get too long
## on some systems.  The sed command operating on lisp.mk also reduces
## the length of the command line.  Unfortunately, no-one has any idea
## exactly how long the maximum safe command line length is on all the
## various systems that Emacs supports.  Obviously, the length depends
## on what your value of $srcdir is.  If the length restriction goes
## away, lisp.mk can be merged back into this file.
##
## $(SOME_MACHINE_OBJECTS) comes before $(obj) because some files may
## or may not be included in $(obj), but they are always included in
## $(SOME_MACHINE_OBJECTS).  Since a file is processed when it is mentioned
## for the first time, this prevents any variation between configurations
## in the contents of the DOC file.
##
$(etc)/DOC: $(libsrc)/make-docfile$(EXEEXT) $(obj) $(lisp)
	$(MKDIR_P) $(AM_V_v) $(etc)
	-rm -f $(etc)/DOC
	$(libsrc)/make-docfile -d $(srcdir) $(SOME_MACHINE_OBJECTS) $(obj) > $(etc)/DOC
	$(libsrc)/make-docfile -a $(etc)/DOC -d $(lispsource) `$(SED) -n -e 's| \\\\||' -e 's|^[ 	]*$$(lispsource)/||p' $(srcdir)/lisp.mk`

$(libsrc)/make-docfile$(EXEEXT):
	cd $(libsrc); $(MAKE) $(MFLAGS) make-docfile$(EXEEXT)

buildobj.h: Makefile
	for i in $(ALLOBJS); do \
	  echo "$${i}" | $(SED) 's,.*/,,; s/\.obj$$/\.o/; s/^/"/; s/$$/",/' \
	    || exit; \
	done >$@.tmp
	mv $(AM_V_v) $@.tmp $@

buildobj.lst:
	echo "${obj} ${otherobj} " > buildobj.lst

version.h: ../Makefile
	$(MAKE) -C .. src/version.h

globals.h: gl-stamp
	@echo "this target, '$@', just makes its dep, '$<'"

GLOBAL_SOURCES = $(base_obj:.o=.c) $(MAC_OBJC_OBJ:.o=.m) $(NS_OBJC_OBJ:.o=.m)

##the value of GLOBAL_SOURCES may change with the Makefile:
gl-stamp: $(libsrc)/make-docfile$(EXEEXT) $(GLOBAL_SOURCES) Makefile
	$(libsrc)/make-docfile -d $(srcdir) -g $(obj) > gl.tmp
	$(srcdir)/../build-aux/move-if-change gl.tmp globals.h
	echo "timestamp: `date`" > $@

$(ALLOBJS): globals.h
$(ALLPLISTS): globals.h

gnulib_headers: $(lib)/Makefile
	$(MAKE) -C $(lib) headers
.PHONY: gnulib_headers

$(lib)/libgnu.a: $(config_h) gnulib_headers
	cd $(lib) && $(MAKE) libgnu.a

#FIXME: broken due to headers for some reason; a lot of these flags are
# trying to hack around that... (of course it is also broken for other
# reasons, as well...)
macterm_32.o: macterm.c
	@$(MKDEPDIR)
	$(AM_V_CC)$(CC) -c $(CPPFLAGS) $(ALL_CFLAGS) $(PROFILING_CFLAGS) \
	  -Wno-deprecated-declarations -Wno-multichar \
	  -m32 -mno-mmx -mno-sse -mno-sse2 -mno-sse3 \
	  -mno-sse4.1 -mno-sse4.2 -mno-ssse3 -mfpmath=387 \
	  -fno-tree-vectorize -arch i386 -mmacosx-version-min=10.4 \
	  -U__x86_64__ -UTARGET_CPU_X86 -UTARGET_CPU_X86_64 \
	  -D_XMMINTRIN_H_INCLUDED -D__MACHINEEXCEPTIONS__ -o $@ $<

## We have to create $(etc) here because init_cmdargs tests its
## existence when setting Vinstallation_directory (FIXME?).
## This goes on to affect various things, and the emacs binary fails
## to start if Vinstallation_directory has the wrong value.
temacs$(EXEEXT): $(LIBXMENU) $(ALLOBJS) \
	         $(lib)/libgnu.a $(EMACSRES)
	$(AM_V_CCLD)$(CC) $(ALL_CFLAGS) $(TEMACS_LDFLAGS) $(LDFLAGS) \
	  -o temacs $(ALLOBJS) $(lib)/libgnu.a $(W32_RES_LINK) $(LIBES)
	$(MKDIR_P) $(AM_V_v) $(etc)
	@$(TEMACS_POST_LINK)
	if test "x$(MACHOCHECK)" != "x"; then \
	  $(MACHOCHECK) -progress temacs$(EXEEXT); \
	fi
	if test "x$(DSYMUTIL)" != "x"; then \
	  $(DSYMUTIL) temacs$(EXEEXT); \
	fi
	test "x$(CANNOT_DUMP)" = "xyes" || \
	  test "X$(PAXCTL)" = "X" || $(PAXCTL) -r temacs$(EXEEXT)
	test "x$(CANNOT_DUMP)" = "xyes" || test -z "$(SETFATTR)" || \
	  $(SETFATTR) -n user.pax.flags -v r $@

## We do not use ALL_LDFLAGS because LD_SWITCH_SYSTEM and LD_SWITCH_MACHINE
## often contain options that have to do with using the Emacs crt0,
## which are only good with temacs.
prefix-args$(EXEEXT): prefix-args.c $(config_h)
	$(AM_V_CCLD)$(CC) $(ALL_CFLAGS) $(LDFLAGS) \
	  $(srcdir)/prefix-args.c -o prefix-args

## The following oldxmenu-related rules are only (possibly) used if
## HAVE_X11 && !USE_GTK, but there is no harm in always defining them.
$(lwlibdir)/liblw.a: $(config_h) globals.h lisp.h FORCE
	cd $(lwlibdir) && \
	  $(MAKE) $(MFLAGS) CC='$(CC)' CFLAGS='$(CFLAGS)' MAKE='$(MAKE)' \
	    liblw.a
$(oldXMenudir)/libXMenu11.a: FORCE
	cd $(oldXMenudir) && \
	  $(MAKE) $(MFLAGS) CC='$(CC)' CFLAGS='$(CFLAGS)' MAKE='$(MAKE)' \
	    libXMenu11.a
FORCE:
.PHONY: FORCE

ACLOCAL_INPUTS = $(top_srcdir)/configure.ac $(top_srcdir)/m4/*.m4
AUTOCONF_INPUTS = $(top_srcdir)/configure.ac $(top_srcdir)/aclocal.m4
$(top_srcdir)/aclocal.m4: @MAINT@ $(ACLOCAL_INPUTS)
(top_srcdir)/configure config.in: @MAINT@ $(AUTOCONF_INPUTS)
.PRECIOUS: ../config.status Makefile
../config.status: $(top_srcdir)/configure @MAINT@ $(top_srcdir)/lisp/version.el
Makefile: $(srcdir)/Makefile.in @MAINT@ ../config.status $(srcdir)/deps.mk
../config.status: config.in epaths.in
	@echo "The file ${?:.in=.h} needs to be set up from $?."
	@echo "Please run the 'configure' script again."
	exit 1

$(top_srcdir)/aclocal.m4 $(top_srcdir)/configure config.in Makefile:
@GNU_MAKE_TRUE@	$(MAKE) -C .. am--refresh
@GNU_MAKE_FALSE@	cd .. && $(MAKE) am--refresh

doc.o: buildobj.h

emacs.res: $(ntsource)/emacs.rc \
	   $(ntsource)/icons/emacs.ico \
	   $(ntsource)/$(EMACS_MANIFEST)
	$(WINDRES) -O COFF --include-dir=$(srcdir)/../nt \
	  -o $@ $(ntsource)/emacs.rc

#ifdef HAVE_CARBON
## (dependencies should now go in deps.mk)

${emacsapp}Contents/Resources/English.lproj:
	${MKDIR_P} $(AM_V_v) $@

@ifGNUmake@ifneq (${emacsapp},${emacsappsrc})
@ifGNUmake@${emacsapp}Contents/Info.plist: ${emacsappsrc}Contents/Info.plist
@ifGNUmake@	cp $(AM_V_v) $< $@
@ifGNUmake@${emacsapp}Contents/PkgInfo: ${emacsappsrc}Contents/PkgInfo
@ifGNUmake@	cp $(AM_V_v) $< $@
@ifGNUmake@${emacsapp}Contents/Resources/Emacs.icns: ${emacsappsrc}Contents/Resources/Emacs.icns
@ifGNUmake@	${MKDIR_P} $(AM_V_v) ${emacsapp}Contents/Resources
@ifGNUmake@	cp $(AM_V_v) $< $@
@ifGNUmake@${emacsapp}Contents/Resources/English.lproj/InfoPlist.strings: ${emacsappsrc}Contents/Resources/English.lproj/InfoPlist.strings
@ifGNUmake@	cp $(AM_V_v) $< $@
@ifGNUmake@endif

macosx-bundle: ${emacsapp}Contents/Resources/English.lproj \
	${emacsapp}Contents/Info.plist ${emacsapp}Contents/PkgInfo \
	${emacsapp}Contents/Resources/Emacs.icns \
	${emacsapp}Contents/Resources/English.lproj/InfoPlist.strings
macosx-app: macosx-bundle ${emacsapp}Contents/MacOS/Emacs emacs$(EXEEXT)
	cd ../mac && $(MAKE) $(MFLAGS) all
${emacsapp}Contents/MacOS/Emacs: emacs${EXEEXT}
	${MKDIR_P} $(AM_V_v) ${emacsapp}Contents/MacOS/;
	cd ${emacsapp}Contents/MacOS/; \
	  cp $(AM_V_v) ../../../../src/emacs${EXEEXT} Emacs${EXEEXT}
#endif /* HAVE_CARBON */
ns-app: emacs$(EXEEXT)
	cd ../nextstep && $(MAKE) $(MFLAGS) all

.PHONY: mostlyclean clean bootstrap-clean distclean maintainer-clean
.PHONY: versionclean extraclean

mostlyclean:
	rm -f temacs$(EXEEXT) prefix-args$(EXEEXT) core *.core \#* *.o
	rm -f libXMenu11.a liblw.a
	rm -f ../etc/DOC
	rm -f bootstrap-emacs$(EXEEXT) emacs-$(version)$(EXEEXT)
	-rm -rf bootstrap-emacs.dSYM
	rm -f buildobj.h
	rm -f buildobj.lst
	rm -f getloadavg_test$(EXEEXT)
	rm -f globals.h gl-stamp
	rm -f version.h
	rm -f *.res *.tmp
clean: mostlyclean
	rm -f emacs-*.*.*$(EXEEXT) emacs$(EXEEXT)
	-rm -rf *.dSYM
	-rm -rf $(DEPDIR)

## bootstrap-clean is used to clean up just before a bootstrap.
## It should remove all files generated during a compilation/bootstrap,
## but not things like config.status or TAGS.
bootstrap-clean: clean
	rm -f epaths.h config.h config.stamp stamp-h1
	if test -f ./.gdbinit; then \
	  mv $(AM_V_v) ./.gdbinit ./.gdbinit.save; \
	  if test -f "$(srcdir)/.gdbinit"; then rm -f ./.gdbinit.save; \
	  else mv $(AM_V_v) ./.gdbinit.save ./.gdbinit; fi; \
	fi

distclean: bootstrap-clean
	rm -f Makefile

maintainer-clean: distclean
	rm -f TAGS *~
versionclean:
	-rm -f emacs$(EXEEXT) emacs-*.*.*$(EXEEXT) ../etc/DOC*
	-rm -f version.h
extraclean: distclean
	-rm -f *~ \#*


ETAGS = ../lib-src/etags

ctagsfiles1 = [xyzXYZ]*.[hc]
ctagsfiles2 = [a-wA-W]*.[hc]
ctagsfiles3 = [a-zA-Z]*.m

## FIXME? In out-of-tree builds, should TAGS be generated in srcdir?

## This does not need to depend on ../lisp and ../lwlib TAGS files,
## because etags "--include" only includes a pointer to the file,
## rather than the file contents.
TAGS: $(srcdir)/$(ctagsfiles1) $(srcdir)/$(ctagsfiles2) $(srcdir)/$(ctagsfiles3)
	"$(ETAGS)" --include=../lisp/TAGS --include=$(lwlibdir)/TAGS \
	  --regex='{c}/[ 	]*DEFVAR_[A-Z_ 	(]+"\([^"]+\)"/' \
	  $(srcdir)/$(ctagsfiles1) $(srcdir)/$(ctagsfiles2) \
	  --regex='{objc}/[ 	]*DEFVAR_[A-Z_ 	(]+"\([^"]+\)"/' \
	  $(srcdir)/$(ctagsfiles3)

## Arrange to make tags tables for ../lisp and ../lwlib,
## which the above TAGS file for the C files includes by reference.
../lisp/TAGS:
	cd ../lisp && $(MAKE) TAGS ETAGS="$(ETAGS)"

$(lwlibdir)/TAGS:
	cd $(lwlibdir) && $(MAKE) TAGS ETAGS="$(ETAGS)"

tags: TAGS ../lisp/TAGS $(lwlibdir)/TAGS
.PHONY: tags


### Bootstrapping.

## Bootstrapping right is difficult because of the circular dependencies.
## Furthermore, we have to deal with the fact that many compilation targets
## such as loaddefs.el or *.elc can typically be produced by any old
## Emacs executable, so we would like to avoid rebuilding them whenever
## we build a new Emacs executable.
##
## (In other words, changing a single file src/foo.c would force
## dumping a new bootstrap-emacs, then re-byte-compiling all preloaded
## elisp files, and only then dump the actual src/emacs, which is not
## wrong, but is overkill in 99.99% of the cases.)
##
## To solve the circularity, we use 2 different Emacs executables,
## "emacs" is the main target and "bootstrap-emacs" is the one used
## to build the *.elc and loaddefs.el files.
## To solve the freshness issue, we used to use a 3rd file "witness-emacs"
## which was used to witness the fact that there is a bootstrap-emacs
## executable, and then have dependencies on witness-emacs rather than
## bootstrap-emacs, but that lead to problems in parallel builds (because
## witness-emacs needed to be free from dependencies (to avoid rebuilding
## it), so it was compiled in parallel, leading typically to having 2
## processes dumping bootstrap-emacs at the same time).
## So instead, we replace the witness-emacs dependencies by conditional
## bootstrap-dependencies (via $(BOOTSTRAPEMACS)).  Of course, since we do
## not want to rely on GNU Make features, we have to rely on an external
## script to do the conditional part of the dependency
## (i.e. see the $(SUBDIR) rule ../Makefile.in).

.SUFFIXES: .elc .el

## These suffix rules do not allow additional dependencies, sadly, so
## instead of adding a $(BOOTSTRAPEMACS) dependency here, we add it
## separately below.
## With GNU Make, we would just say "%.el : %.elc $(BOOTSTRAPEMACS)"
.el.elc:
	@cd ../lisp; $(MAKE) $(MFLAGS) compile-onefile \
	                     THEFILE=$< EMACS="$(bootstrap_exe)"

## Since the .el.elc rule cannot specify an extra dependency, we do it here.
$(lisp): $(BOOTSTRAPEMACS)

## VCSWITNESS points to the file that holds info about the current checkout.
## We use it as a heuristic to decide when to rebuild loaddefs.el.
## If empty it is ignored; the parent makefile can set it to some other value.
VCSWITNESS =

$(lispsource)/loaddefs.el: $(BOOTSTRAPEMACS) @MAINT@ $(VCSWITNESS)
	cd ../lisp; $(MAKE) $(MFLAGS) autoloads EMACS="$(bootstrap_exe)"

## Dump an Emacs executable named bootstrap-emacs containing the
## files from loadup.el in source form.
bootstrap-emacs$(EXEEXT): ../lisp/Makefile temacs$(EXEEXT)
	cd ../lisp; $(MAKE) $(MFLAGS) update-subdirs
	if test "x$(CANNOT_DUMP)" = "xyes"; then \
	  echo "Skipping dumping"; \
	  rm -f bootstrap-emacs$(EXEEXT); \
	  ln $(AM_V_v) temacs$(EXEEXT) bootstrap-emacs$(EXEEXT); \
	else \
	  if test -n "`$(FILE_MAGIC_BIN) temacs | $(GREP) 'Mach-O universal binary'`"; then \
	    mv $(AM_V_v) temacs emacs-undumped; \
	    $(LIPO) -thin `$(SRCROOT)/filearch.rb emacs-undumped` -output temacs emacs-undumped; \
	    rm emacs-undumped; \
	  fi; \
	  echo "Running $(RUN_TEMACS) for bootstrapping"; \
	  $(RUN_TEMACS) --batch --load loadup bootstrap || exit 1; \
	  test "X$(PAXCTL)" = "X" || $(PAXCTL) -zex emacs$(EXEEXT); \
	  mv -fv emacs$(EXEEXT) bootstrap-emacs$(EXEEXT); \
	fi
	if test "x$(MACHOCHECK)" != "x"; then \
	  $(MACHOCHECK) -progress bootstrap-emacs$(EXEEXT); \
	fi
	if test "x$(DSYMUTIL)" != "x"; then \
	  $(DSYMUTIL) bootstrap-emacs$(EXEEXT); \
	fi
	@echo "Compiling some files earlier to speed up further compilation."
	cd ../lisp; $(MAKE) $(MFLAGS) compile-first EMACS="$(bootstrap_exe)"

## for testing:
getloadavg_test$(EXEEXT): $(srcdir)/getloadavg.c $(config_h)
	$(AM_V_CCLD)$(CC) -o getloadavg_test -DTEST $(ALL_CFLAGS) \
	  $(LDFLAGS) $(srcdir)/getloadavg.c

## Insert either autodeps.mk (if AUTO_DEPEND), else deps.mk.
@deps_frag@


### Makefile.in ends here
