### @configure_input@

# Copyright (C) 1985, 1987-1988, 1993-1994, 2001-2014 Free Software
# Foundation, Inc.

# This file is part of GNU Emacs.

# GNU Emacs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# GNU Emacs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

SHELL = @SHELL@

# Following ../lisp/Makefile.in.
EMACS = ../src/emacs
EMACSOPT = -batch --no-site-file --no-site-lisp

# ==================== Things `configure' will edit ====================

CC=@CC@
CFLAGS=@CFLAGS@
## (CPPFLAGS and LDFLAGS are taken care of farther below)
version=@version@
## Used in ${archlibdir}.
configuration=@configuration@
EXEEXT=@EXEEXT@
C_SWITCH_SYSTEM=@C_SWITCH_SYSTEM@
C_SWITCH_MACHINE=@C_SWITCH_MACHINE@
PROFILING_CFLAGS = @PROFILING_CFLAGS@
WARN_CFLAGS = @WARN_CFLAGS@
WARN_LDFLAGS = @WARN_LDFLAGS@
WERROR_CFLAGS = @WERROR_CFLAGS@
UPDATE_MANIFEST = @UPDATE_MANIFEST@

LIBRARY_PATH = @LIBRARY_PATH@

# Program name transformation.
TRANSFORM = @program_transform_name@
# kinda similar:
SED = @SED@

# 'make' verbosity.
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@

AM_V_CC = $(am__v_CC_@AM_V@)
am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 =

AM_V_CCLD = $(am__v_CCLD_@AM_V@)
am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 =

AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 =

# ==================== Where To Install Things ====================

# Location to install Emacs.app under GNUstep / Mac OS X.
# Later values may use this.
ns_appbindir=@ns_appbindir@

# The default location for installation.  Everything is placed in
# subdirectories of this directory.  The default values for many of
# the variables below are expressed in terms of this one, so you may
# not need to change them.  This is set with the --prefix option to
# `../configure'.
prefix=@prefix@

# Like `prefix', but used for architecture-specific files.  This is
# set with the --exec-prefix option to `../configure'.
exec_prefix=@exec_prefix@

# Where to install Emacs and other binaries that people will want to
# run directly (like etags).  This is set with the --bindir option
# to `../configure'.
bindir=@bindir@

# Where to install and expect executable files to be run by Emacs
# rather than directly by users, and other architecture-dependent
# data.  ${archlibdir} is usually below this.  This is set with the
# --libexecdir option to `../configure'.
libexecdir=@libexecdir@

# Directory for local state files for all programs.
localstatedir=@localstatedir@

# Where to find the source code.  This is set by the configure
# script's `--srcdir' option.  However, the value of ${srcdir} in
# this makefile is not identical to what was specified with --srcdir,
# since the variable here has `/lib-src' added at the end.

# We use $(srcdir) explicitly in dependencies so as not to depend on VPATH.
srcdir=@srcdir@
VPATH=@srcdir@

# The top-level source directory, also set by configure.
top_srcdir=@top_srcdir@
# MinGW CPPFLAGS may use this.
abs_top_srcdir=@abs_top_srcdir@

# ==================== Emacs-specific directories ====================

# These variables hold the values Emacs will actually use.  They are
# based on the values of the standard Make variables above.

# Where to put executables to be run by Emacs rather than the user.
# This path usually includes the Emacs version and configuration name,
# so that multiple configurations for multiple versions of Emacs may
# be installed at once.  This can be set with the --archlibdir option
# to `../configure'.
archlibdir=@archlibdir@

gamedir=@gamedir@
gameuser=@gameuser@

# ==================== Utility Programs for the Build =================

# ../configure figures out the correct values for these.
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
# By default, we uphold the dignity of our programs.
INSTALL_STRIP =
MKDIR_P = @MKDIR_P@

# ========================== Lists of Files ===========================

# emacsclientw.exe for MinGW, empty otherwise
CLIENTW = @CLIENTW@

# Things a user might actually run, which should be installed in bindir.
INSTALLABLES = etags${EXEEXT} ctags${EXEEXT} emacsclient${EXEEXT} \
               b2m${EXEEXT} $(CLIENTW) ebrowse${EXEEXT}

INSTALLABLE_SCRIPTS = rcs-checkin  grep-changelog

# Things that Emacs runs internally, or during the build process,
#  which should not be installed in bindir.
UTILITIES = profile${EXEEXT} digest-doc${EXEEXT} sorted-doc${EXEEXT} \
            movemail${EXEEXT} cvtmail${EXEEXT} fakemail${EXEEXT} \
            yow${EXEEXT} emacsserver${EXEEXT} hexl${EXEEXT} \
            update-game-score${EXEEXT}

DONT_INSTALL= test-distrib${EXEEXT} make-docfile${EXEEXT}

TEST_EXES = getopt_test${EXEEXT} getopt_long_test${EXEEXT} \
            wincompat_test${EXEEXT}

# Like UTILITIES, but they are not system-dependent, and should not be
#  deleted by the distclean target.
SCRIPTS= rcs2log vcdiff $(UPDATE_MANIFEST)

# All files that are executable:
EXECUTABLES= ${INSTALLABLES} ${UTILITIES} ${DONT_INSTALL} ${TEST_EXES} \
	${SCRIPTS} ${INSTALLABLE_SCRIPTS}

# All files created by the linker, i.e., whose names end in ${EXEEXT}.
EXE_FILES = ${INSTALLABLES} ${UTILITIES} ${DONT_INSTALL} ${TEST_EXES}

SOURCES = COPYING ChangeLog Makefile.in README emacs.csh \
	makedoc.com *.[chy] rcs2log vcdiff

# Specify additional -D flags for movemail. Options:
# -DMAIL_USE_FLOCK or -DMAIL_USE_LOCKF (use flock or lockf for file locks).
# See the comments about locking in movemail.c.  Normally the values
# set by configure should be correct & you should not need to do anything.
# If neither flag is set, you need to use blessmail.
MOVE_FLAGS=

## Empty if either MAIL_USE_FLOCK or MAIL_USE_LOCKF, else need-blessmail.
BLESSMAIL_TARGET=@BLESSMAIL_TARGET@

## -lkrb or -lkrb4 if needed
KRB4LIB=@KRB4LIB@
## -ldes or -ldes425 if needed
DESLIB=@DESLIB@
## -lkrb5 if needed
KRB5LIB=@KRB5LIB@
## -lk5crypto or -lcrypto if needed
CRYPTOLIB=@CRYPTOLIB@
## -lcom_err if needed
COM_ERRLIB=@COM_ERRLIB@
## -lintl if needed
INTLLIBS=@INTLLIBS@
## -lhesiod if needed
LIBHESIOD=@LIBHESIOD@
## -lresolv if HAVE_LIBRESOLV
LIBRESOLV=@LIBRESOLV@
## -llockfile if HAVE_LIBLOCKFILE or -lmail if HAVE_LIBMAIL
LIBS_MAIL=@LIBS_MAIL@
## empty or -lrt or -lposix4 if HAVE_CLOCK_GETTIME
LIB_CLOCK_GETTIME = @LIB_CLOCK_GETTIME@
## empty or -lrt or -lposix4 if HAVE_FDATASYNC
LIB_FDATASYNC = @LIB_FDATASYNC@
## empty or -lwsock2 for MinGW
LIB_WSOCK32=@LIB_WSOCK32@
## just in case:
GENERAL_PURPOSE_LIBS=@LIBS@

## Extra libraries to use when linking movemail.
LIBS_MOVE = $(LIBS_MAIL) $(KRB4LIB) $(DESLIB) $(KRB5LIB) $(CRYPTOLIB) \
            $(COM_ERRLIB) $(LIBHESIOD) $(LIBRESOLV) $(LIB_WSOCK32) $(LIBINTL)

## Extra libraries when linking emacsclient
## (empty or -lcomctl32 for MinGW)
LIBS_ECLIENT = @LIBS_ECLIENT@ $(INTLLIBS)

## Extra object files for linking for MinGW:
NTLIB = @NTLIB@
CLIENTRES = @CLIENTRES@
WINDRES = @WINDRES@

## Some systems define this to request special libraries.
LIBS_SYSTEM = @LIBS_SYSTEM@

## (the regular LIBS variable is put into GENERAL_PURPOSE_LIBS above)

## gnulib-tool says it might be necessary to use the following Makefile
## variables when linking:
GETLOADAVG_LIBS = @GETLOADAVG_LIBS@
LIB_ACL = @LIB_ACL@
# (LIB_CLOCK_GETTIME is already done above)
LIB_CRYPTO = @LIB_CRYPTO@
LIB_EACCESS = @LIB_EACCESS@
LIB_EXECINFO = @LIB_EXECINFO@
# (LIB_FDATASYNC is already done above)
LIB_PTHREAD_SIGMASK = @LIB_PTHREAD_SIGMASK@
LIB_SELECT = @LIB_SELECT@
LIB_THREADED_SELECT = $(LIB_SELECT) $(LIB_PTHREAD_SIGMASK)
LIB_TIMER_TIME = @LIB_TIMER_TIME@
LTLIBINTL = @LTLIBINTL@
LIBINTL = @LIBINTL@
NEXTAFTER_LIBM = @NEXTAFTER_LIBM@
LIBM = @LIBM@
LIBM_WITH_NEXTAFTER = $(LIBM) $(NEXTAFTER_LIBM)
OPENMP_CFLAGS = @OPENMP_CFLAGS@
acl_cv_wp = @acl_cv_wp@

BASE_CFLAGS = $(C_SWITCH_SYSTEM) $(C_SWITCH_MACHINE) \
	      ${acl_cv_wp}-I. ${acl_cv_wp}-I../src ${acl_cv_wp}-I$(lib) \
	      ${acl_cv_wp}-I${srcdir} ${acl_cv_wp}-I${srcdir}/../src \
	      ${acl_cv_wp}-I${srcdir}/$(lib) \
	      $(WARN_CFLAGS) @MAINT@ $(WERROR_CFLAGS)

DEFS = @DEFS@ -DDEBUG
LDFLAGS = @LDFLAGS@
CPPFLAGS = @CPPFLAGS@ ${DEFS}
FAT_LTO_CFLAGS = @FAT_LTO_CFLAGS@
LTO = @LTO@
ALL_CFLAGS = ${BASE_CFLAGS} ${PROFILING_CFLAGS} ${LDFLAGS} ${CPPFLAGS} \
	     ${CFLAGS} ${FAT_LTO_CFLAGS} ${LTO}
LINK_CFLAGS = ${BASE_CFLAGS} ${LDFLAGS} ${CFLAGS}
CPP_CFLAGS = ${BASE_CFLAGS} ${PROFILING_CFLAGS} ${CPPFLAGS} ${CFLAGS}

# Configuration files for .o files to depend on.
config_h = ../src/config.h $(srcdir)/../src/conf_post.h

# lots of targets use this combination, so do some shortening:
stddep = $(NTLIB) $(config_h)

all: ${EXE_FILES} ${SCRIPTS} ${INSTALLABLE_SCRIPTS}

.PHONY: all need-blessmail maybe-blessmail

## These targets copy the scripts into the build directory
## so that they can be run from there in an uninstalled Emacs.
rcs2log: $(srcdir)/rcs2log
	cp -pv $(srcdir)/rcs2log rcs2log

rcs-checkin: $(srcdir)/rcs-checkin
	cp -pv $(srcdir)/rcs-checkin rcs-checkin

grep-changelog: $(srcdir)/grep-changelog
	cp -pv $(srcdir)/grep-changelog grep-changelog

vcdiff: $(srcdir)/vcdiff
	cp -pv $(srcdir)/vcdiff vcdiff

lib = ../lib

LOADLIBES = $(lib)/libgnu.a $(LIBS_SYSTEM)
$(EXE_FILES): $(lib)/libgnu.a

gnulib_headers: $(lib)/Makefile
	$(MAKE) -C $(lib) stamp-headers
.PHONY: gnulib_headers

## Only used if we need blessmail, but no harm in always defining.
## This makes the actual blessmail executable.
blessmail: $(srcdir)/../lisp/mail/blessmail.el
	$(EMACS) $(EMACSOPT) -l $(srcdir)/../lisp/mail/blessmail.el
	chmod +x blessmail

## This checks if we need to run blessmail.
## Do not charge ahead and do it!  Let the installer decide.
need-blessmail: blessmail
	@if [ `wc -l <blessmail` != 2 ]; then \
	  dir=`$(SED) -n -e 's/echo mail directory = \(.*\)/\1/p' blessmail`; \
	  echo "Assuming $${dir} is really the mail spool directory, you should"; \
	  echo "run  lib-src/blessmail $(DESTDIR)${archlibdir}/movemail${EXEEXT}"; \
	  echo "as root, to give  movemail${EXEEXT}  appropriate permissions."; \
	  echo "Do that after running  make install."; \
	fi

## This is the target invoked by the top-level Makefile.
maybe-blessmail: $(BLESSMAIL_TARGET)

## Install the internal utilities.  Until they are installed, we can
## just run them directly from lib-src.
## If the chown/chmod commands fail, that is not a big deal.
## update-game-score will detect at runtime that it is not setuid,
## and handle things accordingly.
$(DESTDIR)${archlibdir}: all
	@echo ""
	@echo "Installing utilities run internally by Emacs."
	umask 022; ${MKDIR_P} "$(DESTDIR)${archlibdir}"
	exp_archlibdir=`cd "$(DESTDIR)${archlibdir}" && /bin/pwd`; \
	if [ "x$${exp_archlibdir}" != "x`/bin/pwd`" ]; then \
	  for file in ${UTILITIES}; do \
	    $(INSTALL_PROGRAM) $(INSTALL_STRIP) $${file} "$(DESTDIR)${archlibdir}/$${file}"; \
	  done; \
        fi
	umask 022; ${MKDIR_P} "$(DESTDIR)${gamedir}"; \
	touch "$(DESTDIR)${gamedir}/snake-scores"; \
	touch "$(DESTDIR)${gamedir}/tetris-scores"
	-if chown ${gameuser} "$(DESTDIR)${archlibdir}/update-game-score${EXEEXT}" && chmod u+s "$(DESTDIR)${archlibdir}/update-game-score${EXEEXT}"; then \
	  chown ${gameuser} "$(DESTDIR)${gamedir}"; \
	  chmod u=rwx,g=rwx,o=rx "$(DESTDIR)${gamedir}"; \
	fi
	if [ "`cd \"$(DESTDIR)${archlibdir}\" && /bin/pwd`" \
             != "`cd ${srcdir} && /bin/pwd`" ]; then \
	  for file in ${SCRIPTS}; do \
	    $(INSTALL_SCRIPT) ${srcdir}/$$file "$(DESTDIR)${archlibdir}/$$file"; \
	  done; \
	fi

.PHONY: install uninstall mostlyclean clean distclean maintainer-clean
.PHONY: bootstrap-clean extraclean check check-clean tags

install: $(DESTDIR)${archlibdir}
	@echo ""
	@echo "Installing utilities for users to run."
	umask 022; ${MKDIR_P} "$(DESTDIR)${bindir}"
	for file in ${INSTALLABLES} ; do \
	  $(INSTALL_PROGRAM) $(INSTALL_STRIP) $${file} "$(DESTDIR)${bindir}"/`echo $${file} | $(SED) -e 's/${EXEEXT}$$//' -e '$(TRANSFORM)'`${EXEEXT} ; \
	done
	for file in ${INSTALLABLE_SCRIPTS}; do \
	  $(INSTALL_SCRIPT) ${srcdir}/$${file} "$(DESTDIR)${bindir}"/`echo $${file} | $(SED) '$(TRANSFORM)'`; \
	done

uninstall:
	for file in ${INSTALLABLES}; do \
	  rm -f "$(DESTDIR)${bindir}"/`echo $${file} | $(SED) -e 's/${EXEEXT}$$//' -e '$(TRANSFORM)'`${EXEEXT}; \
	done
	for file in ${INSTALLABLE_SCRIPTS}; do \
	  rm -f "$(DESTDIR)${bindir}"/`echo $${file} | $(SED) '$(TRANSFORM)'`; \
	done
	if [ -d "$(DESTDIR)${archlibdir}" ]; then \
	  (cd "$(DESTDIR)${archlibdir}" && rm -f ${UTILITIES} ${SCRIPTS}) \
	fi

mostlyclean:
	-rm -f getopt.h-t
	-rm -f core *.o *.res gmon.out

check-clean: mostlyclean
	-rm -f ${TEST_EXES}

clean: mostlyclean
	-rm -f ${EXE_FILES}
	-rm -rf *.dSYM
	-rm -f fns*.el *.tab.c *.tab.h

distclean: clean
	-rm -f TAGS
	-rm -f Makefile blessmail

bootstrap-clean maintainer-clean: distclean
	-rm -f .DS_Store

extraclean: maintainer-clean
	-rm -f *~ \#*

unlock:
	chmod u+w $(SOURCES)

relock:
	chmod u-w $(SOURCES)

.PHONY: unlock relock

## Test the contents of the directory.
check: ${TEST_EXES} all-obj
	./getopt_test
	./getopt_test -a
	./getopt_test -c 1
	./getopt_long_test -d 2
	./getopt_long_test --verbose
	./wincompat_test

tags: TAGS
TAGS: etags${EXEEXT}
	etags *.[ch]

## This verifies that the non-ASCII characters in the file \`testfile\'
## have not been clobbered by whatever means were used to copy and
## distribute Emacs.  If they were clobbered, all the .elc files were
## clobbered too.
test-distrib${EXEEXT}: ${srcdir}/test-distrib.c ${srcdir}/testfile
	$(AM_V_CCLD)$(CC) ${ALL_CFLAGS} -o test-distrib${EXEEXT} \
	  ${srcdir}/test-distrib.c
	./test-distrib ${srcdir}/testfile

$(lib)/libgnu.a: $(config_h)
	cd $(lib) && $(MAKE) libgnu.a

## We need the following in order to create a <getopt.h> when the system
## does NOT have one that works with the given compiler.
GETOPT_H = @GETOPT_H@
getopt.h: getopt_.h
	if [ ! -e $@ ]; then \
	  cp -v $(srcdir)/getopt_.h $@-t; \
	  $(SED) "s/getopt_.h/getopt.h/g" < $@-t > $@; \
	else \
	  echo "$@ already present"; \
	fi
	@-rm $@-t

GETOPTOBJS = @GETOPTOBJS@
GETOPTDEPS = $(GETOPTOBJS) $(GETOPT_H)
getopt.o: ${srcdir}/getopt.c $(GETOPT_H) ${srcdir}/gettext.h
	$(AM_V_CC)${CC} -c ${CPP_CFLAGS} ${srcdir}/getopt.c
getopt_test${EXEEXT}: ${srcdir}/getopt.c $(GETOPT_H) ${srcdir}/gettext.h
	$(AM_V_CCLD)export LIBRARY_PATH=$(LIBRARY_PATH) && \
	  ${CC} -DTEST ${CPP_CFLAGS} ${srcdir}/getopt.c \
	  $(LOADLIBES) $(LIBINTL) -o $@
getopt1.o: ${srcdir}/getopt1.c $(GETOPT_H)
	$(AM_V_CC)${CC} -c ${CPP_CFLAGS} ${srcdir}/getopt1.c
getopt_long_test${EXEEXT}: ${srcdir}/getopt1.c $(GETOPT_H) getopt.o
	$(AM_V_CCLD)export LIBRARY_PATH=$(LIBRARY_PATH) && \
	  ${CC} -DTEST ${CPP_CFLAGS} ${srcdir}/getopt1.c \
	  getopt.o $(LOADLIBES) $(LIBINTL) $(GENERAL_PURPOSE_LIBS) -o $@
alloca.o: ${srcdir}/alloca.c
	$(AM_V_CC)${CC} -Demacs -c ${BASE_CFLAGS} ${srcdir}/alloca.c

#ifdef REGEXP_IN_LIBC
REGEXPOBJ =
REGEXPDEPS =
#else
REGEXPOBJ = regex.o
REGEXPDEPS = $(REGEXPOBJ) $(srcdir)/../src/regex.h
#endif /* REGEXP_IN_LIBC */

ALL_OBJS = getopt.o getopt1.o alloca.o regex.o movemail.o pop.o ntlib.o \
	   update-game-score.o wincompat_test.o leditcfns.o qsort.o tcp.o

all-obj: $(ALL_OBJS)
	@echo "ensuring all objects have been built..."
	$(AM_V_at)ls *.o
.PHONY: all-obj

regex.o: $(srcdir)/../src/regex.c $(srcdir)/../src/regex.h $(config_h)
	$(AM_V_CC)$(CC) -c $(CPP_CFLAGS) ${srcdir}/../src/regex.c

etags_deps = ${srcdir}/etags.c regex.o $(stddep) chkmalloc.h
etags_DEFS = -DEMACS_NAME="\"GNU Emacs\"" -DVERSION="\"${version}\""
etags_cflags = $(etags_DEFS) -o $@
etags_libs = regex.o $(LOADLIBES) $(NTLIB) $(LIBINTL) $(INTLLIBS)

etags${EXEEXT}: $(etags_deps)
	$(AM_V_CCLD)$(CC) ${ALL_CFLAGS} $(etags_DEFS) ${srcdir}/etags.c \
	  $(etags_libs) -o etags${EXEEXT}

ebrowse_libs = $(LOADLIBES) $(NTLIB) $(LIBINTL) $(INTLLIBS)

ebrowse${EXEEXT}: ${srcdir}/ebrowse.c ${srcdir}/$(lib)/min-max.h $(stddep)
	$(AM_V_CCLD)$(CC) ${ALL_CFLAGS} -DVERSION="\"${version}\"" \
	  ${srcdir}/ebrowse.c $(ebrowse_libs) -o ebrowse${EXEEXT}

## We depend on etags to assure that parallel makes do not write two
## etags.o files on top of each other.
## FIXME?
## Can we not use a wrapper that calls 'etags --ctags'?
ctags${EXEEXT}: etags${EXEEXT}
	$(AM_V_CCLD)$(CC) ${ALL_CFLAGS} -DCTAGS \
	  $(etags_DEFS) ${srcdir}/etags.c $(etags_libs) -o ctags${EXEEXT}

profile${EXEEXT}: ${srcdir}/profile.c $(stddep)
	$(AM_V_CCLD)$(CC) ${ALL_CFLAGS} ${srcdir}/profile.c \
	  $(LOADLIBES) $(NTLIB) $(LIB_CLOCK_GETTIME) -o profile${EXEEXT}

make-docfile${EXEEXT}: ${srcdir}/make-docfile.c $(stddep) gnulib_headers
	$(AM_V_CCLD)$(CC) ${ALL_CFLAGS} ${srcdir}/make-docfile.c \
	  $(LOADLIBES) $(NTLIB) -o make-docfile${EXEEXT}

digest-doc${EXEEXT}: ${srcdir}/digest-doc.c
	$(AM_V_CCLD)$(CC) ${ALL_CFLAGS} ${srcdir}/digest-doc.c \
	   $(LOADLIBES) -o digest-doc

# we use this hack a lot, so make it a variable:
EMACS_DEFS = ${CPP_CFLAGS} -Demacs
sorted-doc${EXEEXT}: ${srcdir}/sorted-doc.c
	$(AM_V_CCLD)$(CC) ${ALL_CFLAGS} ${srcdir}/sorted-doc.c \
	   ${EMACS_DEFS} $(LOADLIBES) -o sorted-doc

b2m${EXEEXT}: ${srcdir}/b2m.c $(config_h) $(GETOPTDEPS)
	$(AM_V_CCLD)$(CC) ${ALL_CFLAGS} ${srcdir}/b2m.c \
	   -DVERSION="\"${version}\"" ${EMACS_DEFS} $(GETOPTOBJS) \
	   $(LOADLIBES) $(LIBINTL) -o b2m

movemail${EXEEXT}: ${srcdir}/movemail.c pop.o $(stddep)
	$(AM_V_CCLD)$(CC) ${ALL_CFLAGS} ${MOVE_FLAGS} \
	  ${srcdir}/movemail.c pop.o $(LOADLIBES) $(NTLIB) $(LIBS_MOVE) \
	  -o movemail${EXEEXT}

movemail.o: ${srcdir}/movemail.c $(config_h) $(GETOPT_H)
	$(AM_V_CC)$(CC) -c ${EMACS_DEFS} ${MOVE_FLAGS} ${srcdir}/movemail.c

pop_srcs = ${srcdir}/pop.c ${srcdir}/pop.h
pop.o: ${pop_srcs} ${srcdir}/$(lib)/min-max.h $(config_h)
	$(AM_V_CC)$(CC) -c ${CPP_CFLAGS} ${MOVE_FLAGS} ${srcdir}/pop.c

cvtmail${EXEEXT}: ${srcdir}/cvtmail.c
	$(AM_V_CCLD)$(CC) ${ALL_CFLAGS} ${srcdir}/cvtmail.c ${EMACS_DEFS} \
	   $(LOADLIBES) -o cvtmail

fakemail${EXEEXT}: ${srcdir}/fakemail.c $(config_h)
	$(AM_V_CCLD)$(CC) ${ALL_CFLAGS} ${srcdir}/fakemail.c \
	   ${EMACS_DEFS} $(LOADLIBES) -o fakemail

yow: ${srcdir}/yow.c ../src/epaths.h
	$(AM_V_CCLD)$(CC) ${ALL_CFLAGS} ${srcdir}/yow.c ${EMACS_DEFS} \
	   $(LOADLIBES) -o yow

emacsserver: ${srcdir}/emacsserver.c $(config_h)
	$(AM_V_CCLD)$(CC) ${ALL_CFLAGS} ${srcdir}/emacsserver.c \
	   $(LOADLIBES) -o emacsserver

emacsclient${EXEEXT}: ${srcdir}/emacsclient.c $(stddep)
	$(AM_V_CCLD)$(CC) ${ALL_CFLAGS} ${srcdir}/emacsclient.c \
	   -DVERSION="\"${version}\"" $(NTLIB) $(LOADLIBES) \
	   $(LIB_FDATASYNC) $(LIB_WSOCK32) $(LIBS_ECLIENT) \
	   -o emacsclient${EXEEXT}

emacsclientw${EXEEXT}: ${srcdir}/emacsclient.c $(CLIENTRES) $(stddep)
	$(AM_V_CCLD)$(CC) ${ALL_CFLAGS} $(CLIENTRES) -mwindows \
	   ${srcdir}/emacsclient.c -DVERSION="\"${version}\"" \
	   $(LOADLIBES) $(LIB_FDATASYNC) $(LIB_WSOCK32) $(LIBS_ECLIENT) \
	   -o emacsclientw${EXEEXT}

#ifdef _WIN32
WINDEFS =
wincompat_h =
#else
WINDEFS = -DWINDOWS_COMPATIBILITY_CHECK
wincompat_h = ${srcdir}/wincompat.h
#endif /* _WIN32 */

NTINC = ${srcdir}/../nt/inc
NTDEPS = $(NTINC)/ms-w32.h $(NTINC)/sys/stat.h $(NTINC)/inttypes.h \
 $(NTINC)/stdint.h $(NTINC)/pwd.h $(NTINC)/sys/time.h $(NTINC)/stdbool.h \
 $(NTINC)/sys/wait.h $(NTINC)/unistd.h $(NTINC)/sys/file.h $(NTINC)/netdb.h

# The dependency on $(NTDEPS) is a trick intended to cause recompile of
# programs on MinGW whenever some private header in nt/inc is modified.
ntlib.o: ${srcdir}/ntlib.c ${srcdir}/ntlib.h $(NTDEPS) ${wincompat_h}
	$(AM_V_CC)$(CC) -c ${CPP_CFLAGS} ${WINDEFS} ${srcdir}/ntlib.c

hexl${EXEEXT}: ${srcdir}/hexl.c $(stddep)
	$(AM_V_CCLD)$(CC) ${ALL_CFLAGS} ${srcdir}/hexl.c $(LOADLIBES) \
	  -o hexl${EXEEXT}

update-game-score${EXEEXT}: ${srcdir}/update-game-score.c $(stddep)
	$(AM_V_CCLD)$(CC) ${ALL_CFLAGS} \
	  -DHAVE_SHARED_GAME_DIR="\"$(gamedir)\"" \
	  ${srcdir}/update-game-score.c $(LOADLIBES) $(NTLIB) $(LIBINTL) \
	  -o update-game-score${EXEEXT}

update-game-score.o: ${srcdir}/update-game-score.c $(config_h) $(GETOPT_H)
	$(AM_V_CC)$(CC) -c ${CPP_CFLAGS} ${srcdir}/update-game-score.c \
	  -DHAVE_SHARED_GAME_DIR="\"$(gamedir)\""

emacsclient.res: $(NTINC)/../emacsclient.rc
	$(WINDRES) -O coff --include-dir=$(NTINC)/.. -o emacsclient.res \
	  $(NTINC)/../emacsclient.rc

## /* for testing the Windows sources on non-Windows platforms: */
wincompat_src = ${srcdir}/wincompat_test.c
wincompat_test.o: ${srcdir}/wincompat_test.c ${srcdir}/wincompat.h
	$(AM_V_CC)${CC} -c ${CPP_CFLAGS} ${WINDEFS} ${wincompat_src}
wincompat_test${EXEEXT}: ${srcdir}/wincompat_test.c ${srcdir}/wincompat.h
	$(AM_V_CCLD)$(CC) ${ALL_CFLAGS} -DTEST ${WINDEFS} \
	  ${wincompat_src} -o $@

## other misc. objects:
leditcfns.o: ${srcdir}/leditcfns.c
	$(AM_V_CC)$(CC) -c ${CPP_CFLAGS} ${srcdir}/leditcfns.c
qsort.o: ${srcdir}/qsort.c
	$(AM_V_CC)$(CC) -c ${CPP_CFLAGS} ${srcdir}/qsort.c
tcp.o: ${srcdir}/tcp.c
	$(AM_V_CC)$(CC) -c $(WARN_CFLAGS) ${PROFILING_CFLAGS} ${CPPFLAGS} \
	  ${CFLAGS} ${srcdir}/tcp.c

## These are NOT included in INSTALLABLES or UTILITIES.
## See ../src/Makefile.in.
emacstool${EXEEXT}: ${srcdir}/emacstool.c
	$(AM_V_CCLD)$(CC) ${srcdir}/emacstool.c -o emacstool \
	  ${ALL_CFLAGS} -lsuntool -lsunwindow -lpixrect $(LOADLIBES)

## For SUN Japanese Language Environment.
nemacstool${EXEEXT}: ${srcdir}/emacstool.c
	$(AM_V_CCLD)$(CC) -o nemacstool -DJLE ${ALL_CFLAGS} \
	  ${srcdir}/emacstool.c -lsuntool -lmle -lsunwindow -lpixrect \
	  $(LOADLIBES)

xvetool${EXEEXT}: ${srcdir}/emacstool.c
	$(AM_V_CCLD)$(CC) -o xvetool -DXVIEW ${ALL_CFLAGS} \
	  ${srcdir}/emacstool.c -lxview -lX -I$(OPENWINHOME)/include \
	  -L$(OPENWINHOME)/lib $(LOADLIBES)

xveterm${EXEEXT}: ${srcdir}/emacstool.c
	$(AM_V_CCLD)$(CC) -o xveterm -DXVIEW -DTTERM ${ALL_CFLAGS} \
	  ${srcdir}/emacstool.c -lxview -lolgx -lX \
	  -I$(OPENWINHOME)/include -L$(OPENWINHOME)/lib $(LOADLIBES)

## For Fujitsu UTS:
tcp${EXEEXT}: ${srcdir}/tcp.c
	cc -O -o tcp tcp.c -DFUJITSU_UTS -lu -lsocket

## Makefile ends here.
