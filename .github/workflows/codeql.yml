# .github/workflows/codeql.yml: codeql workflow for emacs
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches:
      - master
      - dependabot/*
    paths-ignore:
      - /etc/TUTORIAL.es
      - /etc/tutorials/TUTORIAL.es
  pull_request:
    # The branches below must be a subset of the branches above
    branches:
      - master
      - dependabot/*
  schedule:
    - cron: '25 21 * * 6'

jobs:
  analyze:
    name: Analyze
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners
    # Consider using larger runners for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'c-cpp', 'java-kotlin', 'javascript-typescript', 'python', 'ruby' ]
        # CodeQL supports [ 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift' ]
        # Use only 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use only 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at:
        # https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to:
        # https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    - name: Dependencies
      if: matrix.language == 'c-cpp'
      run: |
        sudo apt-get -qq update
        sudo apt-get -y install --fix-missing autopoint gobjc gtk+2.0 gtk+3.0 libxpm-dev ruby

    - name: Autobuild
      if: matrix.language == 'java-kotlin'
      uses: github/codeql-action/autobuild@v3

    - name: Build (as much as possible)
      if: matrix.language == 'c-cpp'
      run: |
        echo "Run, Build Application using script"
        sh ./autogen.sh
        ./configure --without-gif --enable-silent-rules --disable-autodepend --enable-gcc-warnings
        make gnulib_headers || (stat lib/Makefile && wc -l lib/Makefile)
        if test -x "$(which gmake)" && test -x "$(which nproc)" && test -n "$(nproc)" && test "$(nproc)" -gt 1; then \
          echo "attempting parallel build with $(nproc) jobs..."; \
          gmake -j"$(nproc)" --output-sync --no-print-directory only_temacs; \
          gmake -j"$(nproc)" --output-sync --no-print-directory all_only_c; \
        else \
          make only_temacs; \
          make all_only_c; \
        fi
        make -C admin check || make -C admin alloc-colors.o || ruby -c ./*.rb
        # shellcheck disable=SC2001
        for subdir in lib lib/bitset lib/malloc lib/uniwidth lib-src lwlib mac/src msdos oldXMenu src test/cedet/tests; do \
          pushd "${subdir}"; \
          for srcfile in *.c; do \
            echo "attempting to use $(which make) to compile ${srcfile} in ${subdir}"; \
            make "$(echo "${srcfile}" | sed "s/\.c/.o/g")" CFLAGS="-w -Wfatal-errors" || stat -t "${srcfile}"; \
          done; \
          popd; \
        done
        make -C test/automated/flymake/warnpred CHK_SOURCES=test.c
        find . -name '*.o' -exec cp -v {} . ";" || echo "failed copying an object file"

    - name: Extra coverage build (C)
      if: matrix.language == 'c-cpp' && success()
      run: |
        # shellcheck disable=SC2001,SC2044
        for cfile in $(find . -name '*.c' -type f); do \
          cobjfile="$(echo "${cfile}" | sed "s/\.c/.o/g")"; \
          if test ! -e "${cobjfile}"; then \
            echo "One last attempt at compiling ${cfile}..."; \
            gcc -c -I. -I.. "${cfile}" || stat "${cfile}" || echo "cfile is ${cfile}"; \
          else \
            echo "object file ${cobjfile} already exists for ${cfile}."; \
            cp -v "${cobjfile}" "$(dirname "${cfile}")" || cp -v "${cobjfile}" . || cp -v "${cobjfile}" ..; \
          fi; \
        done

    - name: Extra coverage build (Java)
      if: matrix.language == 'java-kotlin' && success()
      run: |
        # shellcheck disable=SC2044
        for javafile in $(find . -name '*.java' -type f); do \
          sync && echo "One last attempt at compiling ${javafile}..."; \
          javac "${javafile}" || stat "${javafile}"; \
        done
        if test -n "${javafile}"; then unset javafile; fi

    - name: Clang static analysis
      if: matrix.language == 'c-cpp' && success()
      run: |
        # shellcheck disable=SC2001
        if test -x "$(which clang)" && test -n "$(clang --version)"; then \
          echo "attempting to use $(which clang) for static analysis"; \
          echo "but first, let us check the version that it reports..."; \
          clang --version; \
          if test -x "$(which nproc)" && test -n "$(nproc)" && test "$(nproc)" -gt 1; then \
            make -j"$(nproc)" -C src check || make -j"$(nproc)" -ki -C src check; \
            make -j"$(nproc)" -C lib-src all-plist || make -j"$(nproc)" -ki -C lib-src all-plist; \
            make -j"$(nproc)" apple_check || make -j"$(nproc)" -ki apple_check; \
          else \
            echo "warning: on the slow path..."; \
            make -C src check || make -ki -C src check; \
            make -C lib-src all-plist || make -ki -C lib-src all-plist; \
            make apple_check || make -ki apple_check; \
          fi; \
          if [ $? -ge 1 ]; then \
            for mysubdir in lib-src src; do \
              pushd ${mysubdir}; \
              for srcfile in *.c; do \
                echo "attempting to use $(which make) to have $(which clang) statically analyze ${srcfile}..."; \
                make "$(echo "${srcfile}" | sed "s/\.c/.plist/g")" || stat "${srcfile}"; \
              done; \
              popd; \
            done; \
          else \
            echo "return code says we are done; so much for static analysis with clang..."; \
          fi; \
        else \
          echo "no usable clang found for static analysis!"; \
        fi

    - name: Syntax check
      run: |
        if test "${{ matrix.language }}" = "python"; then \
          echo "Checking syntax... $(python -m py_compile etc/*.py)"; \
        elif test "${{ matrix.language}}" = "javascript-typescript"; then \
          node -c test/indent/js.js || (stat test/indent/js.js && wc -l test/indent/js.js); \
        elif test "${{ matrix.language }}" = "ruby"; then \
          ruby -cwv ./*.rb || ruby -c ./*.rb || ls ./*.rb || which ruby; \
        elif test "${{ matrix.language }}" = "c-cpp" && test -e GNUmakefile && test -e maint.mk && test -x "$(which nproc)" && test -n "$(nproc)" && test "$(nproc)" -gt 1; then \
          make -j"$(nproc)" syntax-check V=0 || ls .sc-start-sc_* || stat GNUmakefile || stat maint.mk; \
        else \
          echo "no special syntax checking stuff for ${{ matrix.language }} (yet)"; \
        fi

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
